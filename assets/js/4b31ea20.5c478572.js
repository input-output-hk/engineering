"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[2549],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,m=u["".concat(s,".").concat(g)]||u[g]||c[g]||i;return n?a.createElement(m,l(l({ref:t},h),{},{components:n})):a.createElement(m,l({ref:t},h))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9842:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return h},toc:function(){return c},default:function(){return g}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={slug:"2024-11-07-ghc-update",title:"IOG GHC Update #37",authors:["sylvain","doyougnu","luite"],tags:["ghc","ghc-update"]},s=void 0,p={permalink:"/2024-11-07-ghc-update",editUrl:"https://github.com/input-output-hk/engineering/tree/master/blog/2024-11-07-ghc-update-37.md",source:"@site/blog/2024-11-07-ghc-update-37.md",title:"IOG GHC Update #37",description:"Triweekly update from the GHC DevX team at IOG.",date:"2024-11-07T00:00:00.000Z",formattedDate:"November 7, 2024",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:1.86,truncated:!0,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"},{name:"Jeffrey M. Young",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"doyougnu"},{name:"Luite Stegeman",title:"Haskell DevX Engineer @ IOG",email:"luite.stegeman@iohk.io",key:"luite"}],frontMatter:{slug:"2024-11-07-ghc-update",title:"IOG GHC Update #37",authors:["sylvain","doyougnu","luite"],tags:["ghc","ghc-update"]},nextItem:{title:"IOG GHC Update #36",permalink:"/2024-10-17-ghc-update"}},h={authorsImageUrls:[void 0,void 0,void 0]},c=[{value:"High-level Summary",id:"high-level-summary",children:[],level:2},{value:"Details",id:"details",children:[{value:"Performance",id:"performance",children:[],level:3},{value:"Toolchain",id:"toolchain",children:[],level:3},{value:"Maintenance",id:"maintenance",children:[],level:3}],level:2}],u={toc:c};function g(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Triweekly update from the GHC DevX team at IOG."),(0,i.kt)("p",null,"Previous updates can be found ",(0,i.kt)("a",{parentName:"p",href:"https://engineering.iog.io/tags/ghc-update"},"here"),"."),(0,i.kt)("h2",{id:"high-level-summary"},"High-level Summary"),(0,i.kt)("p",null,"The team has been working on providing patches for GHC to fix the cardano regression mentioned in previous updates."),(0,i.kt)("p",null,"See details below for the more general maintenance and improvement fixes."),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"performance"},"Performance"),(0,i.kt)("p",null,"Sylvain: improved performance of codes using user event tracing (e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"traceEvent"),") when tracing is disabled, putting an end to a long saga of merge\nrequests by different people\n(",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3323"},"GHC!3323"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5316"},"GHC!5316"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/12302"},"GHC!12302"),"). I\nmostly did the menial work of making the latest MR pass CI and of getting it\napproved by the CLC because it impacts ",(0,i.kt)("inlineCode",{parentName:"p"},"base"),"\n(",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/core-libraries-committee/issues/291#issuecomment-2420734806"},"CLC!291"),").\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13295"},"GHC!13295")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/17949"},"GHC#17949"),"."),(0,i.kt)("p",null,"Luite: Attempted to find the right conditions in the coreprep pass to modify speculative\nevaluation optimization to fix the regression preventing us from upgrading Cardano\nto GHC 9.6. Unfortunately it turned out that a working fix would also affect\noptimizations elsewhere, making it risky to backport. We decided to add flags\nto GHC for directly controlling the speculative evaluation optimization instead,\nwith the intention of backporting them to GHC 9.6+. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13556"},"GHC!13556")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/25284"},"GHC#25284"),"."),(0,i.kt)("p",null,"Jeff: Refined the SrcLoc type to be unpacked and strict. This was the second attempt to close out CLC proposal ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/core-libraries-committee/issues/55"},"CLC#55"),". This is now merged in ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13381"},"GHC!13381")," and reduced binary sizes for almost every compiler artifact."),(0,i.kt)("h3",{id:"toolchain"},"Toolchain"),(0,i.kt)("p",null,"Sylvain: fixed Stack support for the upcoming GHC 9.12. See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/commercialhaskell/hi-file-parser/issues/21"},"hi-file-parser#21")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/commercialhaskell/hi-file-parser/pull/23"},"hi-file-parser!23"),". Almost every release of GHC makes some changes to the interface file (.hi) format.\nStack parses these files to get dependency tracking right. This solution is fragile but there isn't another option currently: see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/commercialhaskell/stack/issues/5134"},"stack#5134"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/17620"},"GHC#17620"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ghc-proposals/ghc-proposals/pull/245"},"GHC-proposal#245"),"."),(0,i.kt)("h3",{id:"maintenance"},"Maintenance"),(0,i.kt)("p",null,"Sylvain: simplified the handling of the virtual ",(0,i.kt)("inlineCode",{parentName:"p"},"GHC.Prim")," module by the build system.\nThe build systems no longer have to special-case the handling of this module: it is all done in GHC which was already treating it differently internally anyway. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13477"},"GHC!13477"),"."),(0,i.kt)("p",null,"Luite: Fixed a small issue with non-ASCII characters in the parser breaking HLS. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/25396"},"GHC#25396"),", ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13461"},"GHC!13461"),"."),(0,i.kt)("p",null,"Jeff: Has been working towards splitting base and GHC with CLC proposal ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/core-libraries-committee/issues/289"},"CLC#289"),". This has been implemented in ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13428"},"GHC!13428")," and ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13343"},"GHC!13343"),". GHC will be a little less coupled to base in 9.14 :)"))}g.isMDXComponent=!0}}]);