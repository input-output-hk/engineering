"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[9910],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return g}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),g=r,d=u["".concat(s,".").concat(g)]||u[g]||h[g]||i;return a?n.createElement(d,l(l({ref:t},c),{},{components:a})):n.createElement(d,l({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4419:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return c},toc:function(){return h},default:function(){return g}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={slug:"2024-10-17-ghc-update",title:"IOG GHC Update #36",authors:["sylvain","doyougnu","luite"],tags:["ghc","ghc-update"]},s=void 0,p={permalink:"/2024-10-17-ghc-update",editUrl:"https://github.com/input-output-hk/engineering/tree/master/blog/2024-10-17-ghc-update-36.md",source:"@site/blog/2024-10-17-ghc-update-36.md",title:"IOG GHC Update #36",description:"Triweekly update from the GHC DevX team at IOG.",date:"2024-10-17T00:00:00.000Z",formattedDate:"October 17, 2024",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:1.995,truncated:!0,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"},{name:"Jeffrey M. Young",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"doyougnu"},{name:"Luite Stegeman",title:"Haskell DevX Engineer @ IOG",email:"luite.stegeman@iohk.io",key:"luite"}],frontMatter:{slug:"2024-10-17-ghc-update",title:"IOG GHC Update #36",authors:["sylvain","doyougnu","luite"],tags:["ghc","ghc-update"]},prevItem:{title:"IOG GHC Update #37",permalink:"/2024-11-07-ghc-update"},nextItem:{title:"IOG GHC Update #35",permalink:"/2024-09-26-ghc-update"}},c={authorsImageUrls:[void 0,void 0,void 0]},h=[{value:"High-level Summary",id:"high-level-summary",children:[],level:2},{value:"Details",id:"details",children:[{value:"Code generation",id:"code-generation",children:[],level:3},{value:"GHC/Base Stability",id:"ghcbase-stability",children:[],level:3},{value:"Template Haskell / GHCi interpreter",id:"template-haskell--ghci-interpreter",children:[],level:3},{value:"JavaScript backend",id:"javascript-backend",children:[],level:3},{value:"Binary Sizes",id:"binary-sizes",children:[],level:3}],level:2}],u={toc:h};function g(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Triweekly update from the GHC DevX team at IOG."),(0,i.kt)("p",null,"Previous updates can be found ",(0,i.kt)("a",{parentName:"p",href:"https://engineering.iog.io/tags/ghc-update"},"here"),"."),(0,i.kt)("h2",{id:"high-level-summary"},"High-level Summary"),(0,i.kt)("p",null,"We confirmed that speculative evaluation (",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/25284"},"GHC#25284")," is indeed causing the Cardano node performance regression and that there are no other blocking performance issues. This means that we can upgrade Cardano to GHC 9.6 once we have a release with a backported fix."),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("h3",{id:"code-generation"},"Code generation"),(0,i.kt)("p",null,"Sylvain: fixed z-encoding of tuple symbols issue leading to overlong symbols.\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/25364"},"GHC#25364"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13404"},"GHC!13404"),"."),(0,i.kt)("p",null,"Jeff: Swapped the use of lists with an OrdList ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13221"},"GHC!13221")," GHC's code generator. Unfortunately, this led to a 2% increase in compile time allocations which is unavoidable due to the need to pattern match on pattern synonyms that allocate a new spine for the OrdList. Trying to make the OrdList more strict does not work because the knot tying in the Cmm Parser requires a certain amount of laziness, and OrdList is used throughout the code generator. Thus, changes in the OrdList's strictness impact the knot tying and can make the compiler loop. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/19245"},"GHC#19245")," for more knot tying mayhem."),(0,i.kt)("p",null,"Sylvain: tried to use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jart/cosmopolitan"},"Cosmopolitan")," toolchain with GHC. Still a work in progress."),(0,i.kt)("h3",{id:"ghcbase-stability"},"GHC/Base Stability"),(0,i.kt)("p",null,"Jeff: Added an RTS flag, called ",(0,i.kt)("inlineCode",{parentName:"p"},"--optimistic-linking")," to make the runtime linker less conservative. ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13012"},"GHC!13012"),"."),(0,i.kt)("p",null,"Jeff: Got CLC approval to improve the stability of base by removing GHC's RTS flags out of base and into ",(0,i.kt)("inlineCode",{parentName:"p"},"ghc-experimental"),". The present flag api in ",(0,i.kt)("inlineCode",{parentName:"p"},"base")," will be unchanged and deprecated. This work lays the groundwork for the transition. New flags will be exposed through ",(0,i.kt)("inlineCode",{parentName:"p"},"ghc-experimental")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"base"),". ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13428"},"GHC!13428"),"."),(0,i.kt)("h3",{id:"template-haskell--ghci-interpreter"},"Template Haskell / GHCi interpreter"),(0,i.kt)("p",null,"Luite: added locking in the communication with the external interpreter. This\nfixes errors and deadlocks when using Template Haskell in combination with\nparallel (",(0,i.kt)("inlineCode",{parentName:"p"},"-j"),") builds. ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/25083"},"GHC#25083"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13447"},"GHC!13447"),"."),(0,i.kt)("h3",{id:"javascript-backend"},"JavaScript backend"),(0,i.kt)("p",null,"Sylvain: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/engineering/pull/96"},"started writing a blog\npost")," to showcase the\nJavaScript backend feature allowing it to compile and to link with C sources\ncompiled to WebAssembly/JavaScript. Once completed it will be published on this\nblog."),(0,i.kt)("h3",{id:"binary-sizes"},"Binary Sizes"),(0,i.kt)("p",null,"Jeff: Made the ",(0,i.kt)("inlineCode",{parentName:"p"},"SrcLoc")," data type more strict, which allowed GHC to automatically unpack certain fields. This yields about a 7% reduction in certain boot libraries like ",(0,i.kt)("inlineCode",{parentName:"p"},"exception"),". See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13381"},"GHC!13381"),", this also closes ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/core-libraries-committee/issues/55"},"CLC!55"),". While that works we can still go farther. ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/13438"},"GHC!13438")," tries to squeeze these fields into just two machine words (instead of 12); this is still in draft though."))}g.isMDXComponent=!0}}]);