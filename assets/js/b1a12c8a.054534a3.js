"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[9915],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),u=i,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||r;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7432:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return p},toc:function(){return h},default:function(){return u}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],s={slug:"2023-01-26-ghc-update",title:"GHC DevX Update 2023-01-26",authors:["sylvain","doyougnu","luite","josh"],tags:["ghc","ghc-update"]},l=void 0,c={permalink:"/2023-01-26-ghc-update",source:"@site/blog/2023-01-26-ghc-update-2023-01-26.md",title:"GHC DevX Update 2023-01-26",description:"This is the second biweekly update of the IOG GHC DevX team.",date:"2023-01-26T00:00:00.000Z",formattedDate:"January 26, 2023",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:6.225,truncated:!1,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"},{name:"Jeffrey M. Young",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"doyougnu"},{name:"Luite Stegeman",title:"Haskell DevX Engineer @ IOG",email:"luite.stegeman@iohk.io",key:"luite"},{name:"Joshua Meredith",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"josh"}],frontMatter:{slug:"2023-01-26-ghc-update",title:"GHC DevX Update 2023-01-26",authors:["sylvain","doyougnu","luite","josh"],tags:["ghc","ghc-update"]},prevItem:{title:"IOG GHC Update #3 (2023-02-09)",permalink:"/2023-02-09-ghc-update"},nextItem:{title:"One step forward, an easier interoperability between Rust and Haskell",permalink:"/2023-01-26-hs-bindgen-introduction"}},p={authorsImageUrls:[void 0,void 0,void 0,void 0]},h=[{value:"JavaScript backend",id:"javascript-backend",children:[{value:"Template Haskell",id:"template-haskell",children:[],level:3},{value:"JavaScript backend in the browser tutorial",id:"javascript-backend-in-the-browser-tutorial",children:[],level:3},{value:"Cabal support for js-sources",id:"cabal-support-for-js-sources",children:[],level:3},{value:"JavaScript backend CI",id:"javascript-backend-ci",children:[],level:3},{value:"FileStat",id:"filestat",children:[],level:3},{value:"JavaScript RTS refactor",id:"javascript-rts-refactor",children:[],level:3},{value:"JavaScript EDSL",id:"javascript-edsl",children:[],level:3},{value:"Blog posts",id:"blog-posts",children:[],level:3},{value:"JavaScript backend configuration issue in a Docker image",id:"javascript-backend-configuration-issue-in-a-docker-image",children:[],level:3},{value:"Discussion about JavaScript backend maturity",id:"discussion-about-javascript-backend-maturity",children:[],level:3}],level:2},{value:"Compiler performance",id:"compiler-performance",children:[{value:"More-strict <code>break</code>",id:"more-strict-break",children:[],level:3}],level:2},{value:"Misc",id:"misc",children:[{value:"Cross-compilation from Linux/Darwin to Windows",id:"cross-compilation-from-linuxdarwin-to-windows",children:[],level:3},{value:"Hadrian rules to build the Sphinx-based docs",id:"hadrian-rules-to-build-the-sphinx-based-docs",children:[],level:3}],level:2}],d={toc:h};function u(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is the second biweekly update of the IOG GHC DevX team.\nYou can find the previous one ",(0,r.kt)("a",{parentName:"p",href:"https://engineering.iog.io/2023-01-12-ghc-update"},"here"),"."),(0,r.kt)("h2",{id:"javascript-backend"},"JavaScript backend"),(0,r.kt)("h3",{id:"template-haskell"},"Template Haskell"),(0,r.kt)("p",null,"Sylvain continued his work on the implementation of Template Haskell for the JS\nbackend. He factorized the code from ",(0,r.kt)("inlineCode",{parentName:"p"},"iserv")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"libiserv")," into the ",(0,r.kt)("inlineCode",{parentName:"p"},"ghci"),"\nlibrary. This makes it easy for GHC to load and run the external interpreter\nserver (",(0,r.kt)("inlineCode",{parentName:"p"},"iserv"),") that ends up compiled into JavaScript in a NodeJS instance. He\nmodified GHC to avoid creating ByteCode objects (which are unsupported by the JS\nbackend) and to instead compile and link JavaScript code."),(0,r.kt)("p",null,"Template Haskell basically works with the JavaScript backend now, except for a few\ncorner cases (such as one-shot mode), but these should be fixed in the coming\ndays/weeks."),(0,r.kt)("p",null,"Luite modified Sylvain's JavaScript code to fix support for Darwin and Windows. If you\nwant to test it, a draft merge request has been opened:\n",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9779"},"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9779")),(0,r.kt)("h3",{id:"javascript-backend-in-the-browser-tutorial"},"JavaScript backend in the browser tutorial"),(0,r.kt)("p",null,"Josh published a tutorial about using code produced by the JavaScript backend in a web\npage:\n",(0,r.kt)("a",{parentName:"p",href:"https://engineering.iog.io/2023-01-24-javascript-browser-tutorial"},"https://engineering.iog.io/2023-01-24-javascript-browser-tutorial")),(0,r.kt)("h3",{id:"cabal-support-for-js-sources"},"Cabal support for js-sources"),(0,r.kt)("p",null,"Sylvain added tests to his patch that adds cabal support for the ",(0,r.kt)("inlineCode",{parentName:"p"},"js-sources"),"\nstanza when GHC is used as a compiler (and not only when GHCJS is used as a\ncompiler), allowing the patch to be merged:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/haskell/cabal/pull/8636"},"https://github.com/haskell/cabal/pull/8636")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/haskell/cabal/issues/8639"},"https://github.com/haskell/cabal/issues/8639")," is still open though so be careful\nif you try to use ",(0,r.kt)("inlineCode",{parentName:"p"},"js-sources"),", they still don't work in some cases."),(0,r.kt)("h3",{id:"javascript-backend-ci"},"JavaScript backend CI"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9552"},"JavaScript backend\nCI")," has been an\nongoing saga for the last month, and has been a blocking item for JavaScript\nBackend development. Thankfully it is close to being merged. This week, Jeff\nrebased the CI to discover that recent\n",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/commit/d31fcbca6cf4bc166904cfd25696503401ad631d"},"changes"),"\nremoved ",(0,r.kt)("inlineCode",{parentName:"p"},"nodejs")," (the ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," that is bundled with emscripten) from the CI\ncontainers ",(0,r.kt)("inlineCode",{parentName:"p"},"$PATH"),". So Jeff patched the CI images to add ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),". Now the CI runs\nand has discovered two new bugs even before being merged. All that is left is to\nbump some submodules and the CI will be ready to land in GHC HEAD."),(0,r.kt)("h3",{id:"filestat"},"FileStat"),(0,r.kt)("p",null,"Josh opened an MR to match the layout of the JavaScript ",(0,r.kt)("inlineCode",{parentName:"p"},"fileStat")," with the\nlayout of the equivalent struct defined in Emscripten's ",(0,r.kt)("inlineCode",{parentName:"p"},"stat.h"),". This is needed\nto ensure that hsc2hs features work correctly with this data type. Hsc2hs features\ncan peek at memory locations directly without using accessor functions, and the\nmemory locations are taken from the header file, hence the requirement to match\nthese layouts."),(0,r.kt)("p",null,"This MR only touches JavaScript files, so we're waiting on the approval of the\nJS CI before continuing. For more information, see\n",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22573"},"https://gitlab.haskell.org/ghc/ghc/-/issues/22573")),(0,r.kt)("h3",{id:"javascript-rts-refactor"},"JavaScript RTS refactor"),(0,r.kt)("p",null,"Josh refactored parts of the GHC.StgtoJS.Rts.Rts module to remove special cases\nfrom one of the n-argument JavaScript RTS functions, and combined these cases\ninto a general case. Thus, simplifying the Rts module's code."),(0,r.kt)("p",null,"Josh also improved the caching in the JavaScript Backend for commonly used names\nin the generated JavaScript ASTs. Previously, names such as ",(0,r.kt)("inlineCode",{parentName:"p"},"x1")," would require\nallocation ",(0,r.kt)("em",{parentName:"p"},"for each")," use: first by allocating a ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", which was then\nconverted to a GHC ",(0,r.kt)("inlineCode",{parentName:"p"},"FastString"),", which was finally wrapped in a JavaScript AST\ndata constructor. Now, these names are captured in a static CAF'd ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")," and\neach reference was replaced with a lookup to the corresponding slot in the\narray. This avoids the extra allocations and ensures these names are shared."),(0,r.kt)("p",null,"For the full set of refactors, see:\n",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22822"},"https://gitlab.haskell.org/ghc/ghc/-/issues/22822")),(0,r.kt)("h3",{id:"javascript-edsl"},"JavaScript EDSL"),(0,r.kt)("p",null,"Jeff began work on a new eDSL to replace the existing DSL the JavaScript Backend\ninherited from GHCJS. This solves a ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22736"},"design\nproblem"),". The existing DSL in\nthe JavaScript Backend is used for two things: (1) to write the JavaScript\nBackend's garbage collector, runtime system and other low level bits; (2) as a\ntarget for optimizations; (3) as the source for code generation. This becomes\nproblematic because the existing DSL tries to do so much that it ends up not\nbeing particularly good at (1), (2) and (3)."),(0,r.kt)("p",null,"The fix is to separate concerns by writing a new DSL for (1). The DSL is Type\nSafe and based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ku-fpg/sunroof-compiler"},"Sunroof\ncompiler")," (Thanks Andy Gill et al.\nfor your labor!). Then, we'll compile the new DSL to the existing GHCJS DSL.\nThis way we can slowly begin to replace JavaScript Backend code module by\nmodule, thus gaining type safety while still continuing other work. The end game\nof this project is to eventually remove the GHCJS DSL entirely and then compile\nour new DSL to a better intermediate representation that is explicitly crafted\nto make optimizations easier."),(0,r.kt)("h3",{id:"blog-posts"},"Blog posts"),(0,r.kt)("p",null,"Luite has been working on new blog posts about internals of the GHC JavaScript\nbackend and a strategy guide for debugging the generated JavaScript code. These\nwill be published in the coming weeks."),(0,r.kt)("h3",{id:"javascript-backend-configuration-issue-in-a-docker-image"},"JavaScript backend configuration issue in a Docker image"),(0,r.kt)("p",null,"Sylvain debugged a configuration issue of GHC with the JavaScript backend (see\n",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22814"},"#22814"),").\nThe recommended way to configure is to use the following command line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"emconfigure ./configure --target=js-unknown-ghcjs\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"emconfigure")," is provided by the Emscripten project and sets appropriate\nenvironment variables (CC, LD, AR...)."),(0,r.kt)("p",null,"However in some cases it seems like these variables are set as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CC=emcc\nLD=emcc\n...\n")),(0,r.kt)("p",null,"in which case GHC's ",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," script will silently ignores them... and uses\nthe C compiler for the host platform instead (x86-64, aarch64...). As the C\ncompiler is only used for the CPP pass, it results in some inscrutable errors.\nIn ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22814"},"#22814")," the error is due\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"CSize")," being inferred as a 64-bit type while it should be 32-bit for the\nJavaScript platform, leading to CSize values being passed as 2 arguments in FFI\ncalls while the callee expects 1."),(0,r.kt)("p",null,"Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"configure")," with the right environment variables fixes the issue:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./configure CC=$(which emcc) LD=$(which emcc) --target=js-unknown-ghcjs\n")),(0,r.kt)("h3",{id:"discussion-about-javascript-backend-maturity"},"Discussion about JavaScript backend maturity"),(0,r.kt)("p",null,"Quite some time was spent discussing users' expectations about the JavaScript and WASM backends.\nWe would like to make it very clear that even if GHCJS has been here for a long time,\nthe JavaScript backend doesn't yet have the same level of maturity."),(0,r.kt)("p",null,"Bugs, missing features, and sub-par performance are to be expected in the 9.6 release.\nWe encourage adventurous users to try out this release and send us feedback, but it's\nbest to exercise caution before relying on it for production."),(0,r.kt)("h2",{id:"compiler-performance"},"Compiler performance"),(0,r.kt)("h3",{id:"more-strict-break"},"More-strict ",(0,r.kt)("inlineCode",{parentName:"h3"},"break")),(0,r.kt)("p",null,"Josh did more investigation into the performance difference that introducing\nsome strictness into the ",(0,r.kt)("inlineCode",{parentName:"p"},"break"),' function would make. The STG and microbenchmarks\nare very promising, but using the "compile cabal" benchmark, there doesn\'t seem\nto be a noticable time difference caused by the change. In terms of memory, it\nseems to reduce GC copying, but slightly increase overall allocations and total\nmemory usage.'),(0,r.kt)("p",null,"There's pathological cases in using a strict break by default - for example in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"lines")," function. Because of this, it's likely that this optimization would have\nthe most benefit if applied in isolated cases in GHC, if any pathological lazy\ncases are found."),(0,r.kt)("h2",{id:"misc"},"Misc"),(0,r.kt)("h3",{id:"cross-compilation-from-linuxdarwin-to-windows"},"Cross-compilation from Linux/Darwin to Windows"),(0,r.kt)("p",null,"Ticket ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22805"},"#22805")," reminded Sylvain that he had made ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9310"},"MR !9310")," more than two months ago to fix the same issue: cross-compilation from Linux/Darwin to Windows. The MR has now been updated, tested, reviewed, and merged."),(0,r.kt)("h3",{id:"hadrian-rules-to-build-the-sphinx-based-docs"},"Hadrian rules to build the Sphinx-based docs"),(0,r.kt)("p",null,"Sylvain started working on adding a chapter about the JavaScript in GHC's Users Guide.\nThe first step was to fix Hadrian's build rules for the Users Guide (",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9795"},"MR !9795"),")"))}u.isMDXComponent=!0}}]);