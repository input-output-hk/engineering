"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[6283],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),g=p(n),u=a,d=g["".concat(l,".").concat(u)]||g[u]||c[u]||i;return n?r.createElement(d,o(o({ref:t},h),{},{components:n})):r.createElement(d,o({ref:t},h))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9567:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return h},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={slug:"2023-11-16-ghc-update",title:"IOG GHC Update #20",authors:["sylvain","doyougnu","luite","josh"],tags:["ghc","ghc-update"]},l=void 0,p={permalink:"/2023-11-16-ghc-update",editUrl:"https://github.com/input-output-hk/engineering/tree/master/blog/2023-11-16-ghc-update-20.md",source:"@site/blog/2023-11-16-ghc-update-20.md",title:"IOG GHC Update #20",description:"Triweekly update from the GHC DevX team at IOG.",date:"2023-11-16T00:00:00.000Z",formattedDate:"November 16, 2023",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:1.41,truncated:!0,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"},{name:"Jeffrey M. Young",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"doyougnu"},{name:"Luite Stegeman",title:"Haskell DevX Engineer @ IOG",email:"luite.stegeman@iohk.io",key:"luite"},{name:"Joshua Meredith",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"josh"}],frontMatter:{slug:"2023-11-16-ghc-update",title:"IOG GHC Update #20",authors:["sylvain","doyougnu","luite","josh"],tags:["ghc","ghc-update"]},prevItem:{title:"IOG GHC Update #21",permalink:"/2023-12-07-ghc-update"},nextItem:{title:"IOG GHC Update #19",permalink:"/2023-10-26-ghc-update"}},h={authorsImageUrls:[void 0,void 0,void 0,void 0]},c=[{value:"JS backend",id:"js-backend",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],g={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Triweekly update from the GHC DevX team at IOG."),(0,i.kt)("p",null,"Previous updates can be found ",(0,i.kt)("a",{parentName:"p",href:"https://engineering.iog.io/tags/ghc-update"},"here"),"."),(0,i.kt)("h2",{id:"js-backend"},"JS backend"),(0,i.kt)("p",null,"Luite: Fixed some bugs in the new JStg intermediate representation. ",(0,i.kt)("inlineCode",{parentName:"p"},"newIdents")," was broken, which resulted in the same identifiers\nbeing generated multiple times (see ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/11569"},"GHC!11569"),". Some local variable declarations\nwere missing, causing global variables to be used instead (or programs to fail with an error in strict mode). See\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/11581"},"GHC!11581"),"."),(0,i.kt)("p",null,"Luite: Continued work on the JStg optimizer. Floating of single-use values into expressions (removing an intermediate assignment) and constant\nfolding with integers and booleans in expressions now work. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/11507"},"GHC!11507"),"\nfor work in progress."),(0,i.kt)("p",null,"Josh: Fixed several bugs remaining in ",(0,i.kt)("inlineCode",{parentName:"p"},"ghcjs-base")," that occur with the JavaScript backend."),(0,i.kt)("p",null,"Josh: Finished updating ",(0,i.kt)("inlineCode",{parentName:"p"},"ghcjs-base"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ghcjs-dom"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"jsaddle"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"jsaddle-dom")," to work with the JavaScript backend on GHC 9.8.1. These will\nbe officially released soon, for now see:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ghcjs-base"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/JoshMeredith/ghcjs-base/tree/wip/js-backend"},"https://github.com/JoshMeredith/ghcjs-base/tree/wip/js-backend")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ghcjs-dom"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/JoshMeredith/ghcjs-dom/tree/wip/js-backend"},"https://github.com/JoshMeredith/ghcjs-dom/tree/wip/js-backend")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jsaddle"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/JoshMeredith/jsaddle/tree/wip/js-backend"},"https://github.com/JoshMeredith/jsaddle/tree/wip/js-backend")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jsaddle-dom"),": ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/JoshMeredith/jsaddle-dom/tree/wip/js-backend"},"https://github.com/JoshMeredith/jsaddle-dom/tree/wip/js-backend"))),(0,i.kt)("p",null,'Sylvain: fixed support for "wrapper" and "dynamic" FFI imports. This is part of the work towards linking C sources with JS sources\nusing Emscripten. This issue came while compiling ',(0,i.kt)("inlineCode",{parentName:"p"},"sqlite.c"),". ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/11525"},"GHC!11525")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("p",null,"Sylvain: helped debugging\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/iserv-proxy"},"iserv-proxy-interpreter")," which was\nfailing with ",(0,i.kt)("inlineCode",{parentName:"p"},"internal error:Evaluated a CAF that was GC'd!")," (see ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/iserv-proxy/-/merge_requests/1"},"iserv-proxy!1"),").\nIt turned out that this interpreter didn't disable CAF garbage collection contrary to\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/blob/master/compiler/cbits/keepCAFsForGHCi.c"},"GHC"),"\nand the non-proxy ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/blob/master/utils/iserv/cbits/iservmain.c"},"external\ninterpreter"),"."),(0,i.kt)("p",null,"Sylvain: fixed a compiler panic triggered by some package database state with\nunusable packages\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/11604"},"GHC!11604"),".\nThis has been reported quite a few times on the GHC tracker ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/21097"},"GHC#21097"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/11050"},"GHC#11050"),", ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/16996"},"GHC#16996"),",\nand internally on IOG channels. Before that a workaround was to delete cabal-install's store (",(0,i.kt)("inlineCode",{parentName:"p"},"~/.cabal/store")," on Linux)."),(0,i.kt)("p",null,"Jeff: Has been helping the Cardano team migrate to GHC-9.6."))}u.isMDXComponent=!0}}]);