"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[1179],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||i;return r?a.createElement(d,o(o({ref:t},p),{},{components:r})):a.createElement(d,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9857:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return p},toc:function(){return h},default:function(){return m}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=["components"],s={slug:"2022-04-19-ghc-march-2022-update",title:"GHC March 2022 Update",authors:["sylvain"],tags:["ghc","ghc-update"],custom_edit_url:null},l=void 0,c={permalink:"/2022-04-19-ghc-march-2022-update",editUrl:"https://github.com/input-output-hk/engineering/tree/master/blog/2022-04-19-ghc-march-2022-update-jeDstmSW5A-import.md",source:"@site/blog/2022-04-19-ghc-march-2022-update-jeDstmSW5A-import.md",title:"GHC March 2022 Update",description:"JS Backend",date:"2022-04-19T00:00:00.000Z",formattedDate:"April 19, 2022",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:2.4,truncated:!1,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"}],frontMatter:{slug:"2022-04-19-ghc-march-2022-update",title:"GHC March 2022 Update",authors:["sylvain"],tags:["ghc","ghc-update"],custom_edit_url:null},prevItem:{title:"On the inlining of Integer and Natural operations",permalink:"/2022-04-28-on-the-inlining-of-integer-and-natural-operations"},nextItem:{title:"haskell.nix March Update",permalink:"/2022-04-08-haskell-nix-march-update"}},p={authorsImageUrls:[void 0]},h=[{value:"JS Backend",id:"js-backend",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],u={toc:h};function m(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"js-backend"},"JS Backend"),(0,i.kt)("p",null,"In March the team focused on porting more GHCJS code to GHC head."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Most of us are new to GHCJS\u2019s codebase so we are taking some time to better understand it and to better document it as code gets integrated into GHC head."),(0,i.kt)("li",{parentName:"ul"},"Development process: initially we had planned to integrate features one after the others into GHC head. However it was finally decided that features would be merged into a ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/commits/wip/javascript-backend"},"wip/javascript-backend")," branch first and then later merged into GHC head. After trying this approach we decided to work directly into another branch: ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/commits/wip/js-staging"},"wip/js-staging")," . Opening merge requests that can\u2019t be tested against a branch that isn\u2019t GHC head didn\u2019t bring any benefit and slowed us too much."),(0,i.kt)("li",{parentName:"ul"},"Documentation: we wrote a document comparing the different approaches to target JavaScript/WebAssembly ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript"}," https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript")),(0,i.kt)("li",{parentName:"ul"},"RTS: some parts of GHCJS\u2019s RTS are generated from Haskell code, similarly to code generated with the genapply program in the C RTS. This code has been ported to GHC head. As JS linking---especially linking with the RTS---will only be performed by GHC in the short term, we plan to make it generate this code dynamically at link time."),(0,i.kt)("li",{parentName:"ul"},"Linker: most of GHCJS\u2019s linker code has been adapted to GHC head. Because of the lack of modularity of GHC, a lot of GHC code was duplicated into GHCJS and slightly modified. Now that both codes have diverged we need to spend some time making them converge again, probably by making the Linker code in GHC more modular."),(0,i.kt)("li",{parentName:"ul"},"Adaptation to GHC head: some work is underway to replace GHCJS\u2019s Objectable type-class with GHC\u2019s Binary type-class which serves the same purpose. Similarly a lot of uses of Text have been replaced with GHC\u2019s ShortText or FastString."),(0,i.kt)("li",{parentName:"ul"},"Template Haskell: GHCJS has its own TH runner which inspired GHC\u2019s external interpreter (\u201cIserv\u201d) programs. We have been exploring options to port TH runner code as an Iserv implementation. The Iserv protocol uses GADTs to represent its messages which requires more boilerplate code to convert them into JS because we can\u2019t automatically derive aeson instances for them."),(0,i.kt)("li",{parentName:"ul"},"Plugins: we have an MR adding support for \u201cexternal static plugins\u201d to GHC ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377"},"!7377"),". Currently it only supports configuring plugins ",(0,i.kt)("em",{parentName:"li"},"via")," environment variables. We have been working on adding support for command-line flags instead."),(0,i.kt)("li",{parentName:"ul"},"Testsuite: we have fixed GHC\u2019s build system so that it can run GHC\u2019s testsuite when GHC is built as a cross-compiler (",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7850"},"!7850"),"). There is still some work to do (tracked in ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/21292"},"#21292"),") to somehow support tests that ",(0,i.kt)("em",{parentName:"li"},"run")," compiled programs: with cross-compilers, target programs can\u2019t be directly executed by the host architecture.")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/haskellfoundation/tech-proposals/pull/26"},"Performance book"),": some time was spent on the infrastructure (CI) and on switching the format of the book to ReStructured Text"),(0,i.kt)("li",{parentName:"ul"},"Modularity: some time was spent discussing GHC\u2019s design and refactoring (c.f. ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7442"},"!7442")," and ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/20927"},"#20927"),").")))}m.isMDXComponent=!0}}]);