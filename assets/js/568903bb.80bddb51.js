"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[6502],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,m=h["".concat(s,".").concat(d)]||h[d]||u[d]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9521:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={slug:"2023-04-20-ghc-update",title:"IOG GHC Update #8",authors:["sylvain","doyougnu","luite","josh","bartek"],tags:["ghc","ghc-update"]},s=void 0,p={permalink:"/2023-04-20-ghc-update",editUrl:"https://github.com/input-output-hk/engineering/tree/master/blog/2023-04-20-ghc-update-8.md",source:"@site/blog/2023-04-20-ghc-update-8.md",title:"IOG GHC Update #8",description:"Biweekly update from the GHC DevX team at IOG.",date:"2023-04-20T00:00:00.000Z",formattedDate:"April 20, 2023",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:2.6,truncated:!0,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"},{name:"Jeffrey M. Young",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"doyougnu"},{name:"Luite Stegeman",title:"Haskell DevX Engineer @ IOG",email:"luite.stegeman@iohk.io",key:"luite"},{name:"Joshua Meredith",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"josh"},{name:"Bart\u0142omiej Cie\u015blar",title:"Haskell DevX Intern @ IOG",email:"bartlomiej.cieslar@iohk.io",key:"bartek"}],frontMatter:{slug:"2023-04-20-ghc-update",title:"IOG GHC Update #8",authors:["sylvain","doyougnu","luite","josh","bartek"],tags:["ghc","ghc-update"]},prevItem:{title:"Stacks in the JavaScript Backend",permalink:"/2023-04-21-stacks-in-the-js-backend"},nextItem:{title:"IOSim on Hackage!",permalink:"/2023-04-14-io-sim-annoucement"}},c={authorsImageUrls:[void 0,void 0,void 0,void 0,void 0]},u=[{value:"JavaScript backend",id:"javascript-backend",children:[{value:"Pipeline refactoring and new IR",id:"pipeline-refactoring-and-new-ir",children:[],level:3},{value:"Testsuite and cleanup",id:"testsuite-and-cleanup",children:[],level:3},{value:"Documentation",id:"documentation",children:[],level:3}],level:2},{value:"GHC Proposal #0134 (Deprecated Exports)",id:"ghc-proposal-0134-deprecated-exports",children:[],level:2},{value:"Performance",id:"performance",children:[],level:2}],h={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Biweekly update from the GHC DevX team at IOG."),(0,i.kt)("p",null,"Previous updates can be found ",(0,i.kt)("a",{parentName:"p",href:"https://engineering.iog.io/tags/ghc-update"},"here"),"."),(0,i.kt)("h2",{id:"javascript-backend"},"JavaScript backend"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sylvain: fixed the implementation of some thread-related primops\n(listThreads, getThreadLabel...).\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10303"},"GHC!10303"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sylvain: regenerated Cabal lexer with a newer Alex containing his bug fix\nfor the JS backend (cf previous update). Some Cabal tests had to be updated in the process because\nthey were relying on an Alex bug which has been fixed. This raised the question of\nbug fixes vs the PVP. See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/cabal/pull/8896"},"Cabal#8896"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/alex/issues/227"},"Alex#227"),",\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/haskell/pvp/issues/49"},"PVP#49"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Josh: added an implementation for ",(0,i.kt)("inlineCode",{parentName:"p"},"mkdir")," for node targets. Primarily this is\nexpected to be used by Cabal setup scripts, but any JS backend programs running on\nnode will be able to use it. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10279"},"GHC!10279"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Josh: fixed the ",(0,i.kt)("inlineCode",{parentName:"p"},"-fcheck-prim-bounds")," flag for the JS backend. The old implementation\nmostly only caused false negatives in the bounds that were rejected (i.e. it would miss\nsome invalid bounds), but it some cases there were also false positives, caused by\ncasted byte array indexing operations being indexed on the casted type's size.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10234"},"GHC!10234"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Josh: fixed the JS implementation for the ",(0,i.kt)("inlineCode",{parentName:"p"},"access")," function on files. This\nfunction comes from C, but node also provides a direct equivalent - which the new\nimplementation uses. See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10301"},"GHC!10301"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Luite: Worked on optimizing finalizers by disabling heap scanning and found\nan issue affecting ",(0,i.kt)("inlineCode",{parentName:"p"},"debugIO")," in the base library. This is caused by the code\ngenerated for ",(0,i.kt)("inlineCode",{parentName:"p"},"h$appendToHsStringA"),". A fix is now ready, see\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10312"},"GHC!10312")))),(0,i.kt)("h3",{id:"pipeline-refactoring-and-new-ir"},"Pipeline refactoring and new IR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jeff: ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10260"},"MR!10260"),"\nready to land. This MR paves the way for the new IR, changes the small\noptimization pass the JavaScript backend had to target the current IR instead of\ndirectly printing optimized forms, and adds an IR to IR optimizer. CI shows that\nthe compile time allocations for the JavaScript backend is reduced an average of\n3.3% with a maximum reduction 13% with this MR. Note that these reductions\ncome from cleaner code generation, not from the optimizer.")),(0,i.kt)("h3",{id:"testsuite-and-cleanup"},"Testsuite and cleanup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sylvain: replaced uses of obsolescent ",(0,i.kt)("inlineCode",{parentName:"li"},"egrep")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"grep -E"),". Otherwise\nrecent ",(0,i.kt)("inlineCode",{parentName:"li"},"egrep")," programs print a warning that makes some GHC golden tests fail.\nSee ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/22351"},"GHC#22351"),"\nand ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10308"},"GHC!10308"),".")),(0,i.kt)("h3",{id:"documentation"},"Documentation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Luite: Finished the blog post on the lightweight stacks and calling convention\nthe JavaScript backend uses. This will be published on the IOG engineering blog\nshortly.")),(0,i.kt)("h2",{id:"ghc-proposal-0134-deprecated-exports"},"GHC Proposal #0134 (Deprecated Exports)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Bartek: Implemented the parsing and pretty printing of warnings of deprecated exports.\nSee ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10283"},"GHC!10283")," for the partial\nimplementation of the proposal so far.")),(0,i.kt)("h2",{id:"performance"},"Performance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Jeff : First case study on performance engineering for the ",(0,i.kt)("a",{parentName:"p",href:"https://input-output-hk.github.io/hs-opt-handbook.github.io/"},"Haskell\nOptimization Handbook")," is almost done. The case study demonstrates a first pass\nof performance engineering on the klister programming language's interpreter.\nThe chapter demonstrates the use of ticky ticky, info-table, biography and\nretainer analysis profiling to gain a 6-fold improvement in the interpreter.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Josh: Updated the unboxed codebuffers implementation to include pattern\nsynonyms for backwards-compatability. Now, the implementation of handle encoding\nin base can be updated to be more performant without requiring external changes.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9948"},"GHC!9948"),"."))))}d.isMDXComponent=!0}}]);