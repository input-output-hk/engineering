"use strict";(self.webpackChunkengineering_iog_io=self.webpackChunkengineering_iog_io||[]).push([[6236],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),h=r,g=d["".concat(p,".").concat(h)]||d[h]||u[h]||i;return a?n.createElement(g,l(l({ref:t},c),{},{components:a})):n.createElement(g,l({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6064:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},assets:function(){return c},toc:function(){return u},default:function(){return h}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={slug:"2023-05-18-ghc-update",title:"IOG GHC Update #10",authors:["sylvain","doyougnu","luite","josh","bartek"],tags:["ghc","ghc-update"]},p=void 0,s={permalink:"/2023-05-18-ghc-update",source:"@site/blog/2023-05-18-ghc-update-10.md",title:"IOG GHC Update #10",description:"Biweekly update from the GHC DevX team at IOG.",date:"2023-05-18T00:00:00.000Z",formattedDate:"May 18, 2023",tags:[{label:"ghc",permalink:"/tags/ghc"},{label:"ghc-update",permalink:"/tags/ghc-update"}],readingTime:1.745,truncated:!1,authors:[{name:"Sylvain Henry",title:"Haskell DevX Engineer @ IOG",email:"sylvain.henry@iohk.io",key:"sylvain"},{name:"Jeffrey M. Young",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"doyougnu"},{name:"Luite Stegeman",title:"Haskell DevX Engineer @ IOG",email:"luite.stegeman@iohk.io",key:"luite"},{name:"Joshua Meredith",title:"Haskell DevX Engineer @ IOG",url:"https://iog.io/en/",key:"josh"},{name:"Bart\u0142omiej Cie\u015blar",title:"Haskell DevX Intern @ IOG",email:"bartlomiej.cieslar@iohk.io",key:"bartek"}],frontMatter:{slug:"2023-05-18-ghc-update",title:"IOG GHC Update #10",authors:["sylvain","doyougnu","luite","josh","bartek"],tags:["ghc","ghc-update"]},nextItem:{title:"IOG GHC Update #9",permalink:"/2023-05-04-ghc-update"}},c={authorsImageUrls:[void 0,void 0,void 0,void 0,void 0]},u=[{value:"JavaScript backend",id:"javascript-backend",children:[],level:2},{value:"Deprecation warnings",id:"deprecation-warnings",children:[],level:2},{value:"Performance",id:"performance",children:[],level:2},{value:"Linker",id:"linker",children:[],level:2},{value:"Misc.",id:"misc",children:[],level:2}],d={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Biweekly update from the GHC DevX team at IOG."),(0,i.kt)("p",null,"Previous updates can be found ",(0,i.kt)("a",{parentName:"p",href:"https://engineering.iog.io/tags/ghc-update"},"here"),"."),(0,i.kt)("h2",{id:"javascript-backend"},"JavaScript backend"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Josh: Merged a port of ",(0,i.kt)("inlineCode",{parentName:"p"},"clock_gettime")," from GHCJS into the JavaScript backend. This\nfunction is required by some Cabal ",(0,i.kt)("inlineCode",{parentName:"p"},"Setup.hs")," programs, so this brings us closer to\nfull Cabal functionality, as well as Unix parity.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10396"},"GHC!10396"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Luite: Ported the patch to support the ",(0,i.kt)("inlineCode",{parentName:"p"},"process")," package in the GHC JavaScript\nbackend from GHCJS. The old code was never fully tested and only intended to support\nCabal, so there is missing functionality and error reporting is lacking. Work is\nnow on the way to bring it up to level where it can be merged in the ",(0,i.kt)("inlineCode",{parentName:"p"},"process")," package.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Luite: Looked into the test failures for the JavaScript specific weak references.\nIt turned out to be caused by messing deadlock detection. Experimented with making\nthe JavaScript storage manager (",(0,i.kt)("inlineCode",{parentName:"p"},"FinalizationRegistry"),") work for deadlock detection,add\nbut it requires signifcant changes to the representation of ",(0,i.kt)("inlineCode",{parentName:"p"},"ThreadId#")," in the Haskell\ncode. For GHC 9.8 we will most likely document that deadlocks are not guaranteed to\nbe detected with the JavaScript backend, and give the user the option to manually run\nfull deadlock detection (heap scan) if desired.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sylvain: fixed support for the ",(0,i.kt)("inlineCode",{parentName:"p"},"ghcjs_HOST_OS")," CPP conditional.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/23346"},"GHC#22346"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10430"},"GHC!10430"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Sylvain: fixed ",(0,i.kt)("inlineCode",{parentName:"p"},"getpid"),". See ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/23399"},"GHC#23399")," and ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10454"},"GHC!10454"),"."))),(0,i.kt)("h2",{id:"deprecation-warnings"},"Deprecation warnings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Bartek: changed the way warning reporting from addUsedGRE was done from artificially removing all warning categories from dynflags to an explicit argument\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10414"},"GHC!10414"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Bartek: almost finished the deprecated exports proposal, a bug left to fix in backpack\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10283"},"GHC!10283")))),(0,i.kt)("h2",{id:"performance"},"Performance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Josh: Merged improvements to the implementation of handle encoders after approval of\nthe CLC. By manually unboxing functions stored in the ",(0,i.kt)("inlineCode",{parentName:"li"},"CodeBuffer")," record, the\nallocations caused by allocations are reduced by ~20%, and general GHC usage is also\nslightly improved.\nSee ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/9948"},"GHC!9948"),"\nand ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/jobs/1514795#L6775"},"CI Performance Tests"))),(0,i.kt)("h2",{id:"linker"},"Linker"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sylvain: backported fix for ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/19421"},"GHC#19421")," (",(0,i.kt)("inlineCode",{parentName:"li"},"internal error: m32_allocator_init: Failed to map"),") to 9.2. See ",(0,i.kt)("a",{parentName:"li",href:"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/10453"},"GHC!10453"))),(0,i.kt)("h2",{id:"misc"},"Misc."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jeff: First draft of the ",(0,i.kt)("a",{parentName:"li",href:"https://hsyl20.fr/home/files/papers/2022-ghc-modularity.pdf"},"GHC Modularity")," FUNARCH paper is complete.")))}h.isMDXComponent=!0}}]);