{
    "version": "https://jsonfeed.org/version/1",
    "title": "IOG Engineering Blog",
    "home_page_url": "https://engineering.iog.io/",
    "description": "IOG Engineering blog",
    "items": [
        {
            "id": "ghc-update-2022-05",
            "content_html": "<p>This is the May 2022 monthly update from the GHC DevX team at IOG.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"javascript-backend-for-ghc\">JavaScript Backend for GHC<a class=\"hash-link\" href=\"#javascript-backend-for-ghc\" title=\"Direct link to heading\">​</a></h2><p>For a few months we have been merging GHCJS (Haskell to JavaScript compiler) into GHC.\nWe set our first milestone to be the ability to compile and to run the usual \"Hello World\" program.\nIt turned out to be much more involved than we initially thought (requiring FFI support, etc.), but we should be getting there soon.</p><p>This month we have made the following progress:</p><ul><li><p><strong>RTS</strong>: we have modified Hadrian and <code>rts.cabal</code> in order to build a valid\nnative <code>rts</code> unit that GHC can use, in particular containing appropriate\nheader files.</p></li><li><p><strong>linker</strong>: the JS linker has been hooked up with GHC's driver.\nWe fixed several panics in the linker due to erroneous symbol generation code.\nThese bugs were introduced while porting the code from the old 8.10 pretty-printing infrastructure to the newer one.</p></li><li><p><strong>boot libraries</strong>: the JS backend can now build and link all the boot libraries.\nNote that we are not claiming that they are all usable yet. In particular complete FFI support is lacking, but the JS backend Hadrian build completes and so we can start using the produced JS cross-compiler.</p></li><li><p><strong>levity polymorphism</strong>: building <code>ghc-prim</code> uncovered a lurking bug related to\nlevity polymorphism. It wasn't noticed in GHCJS 8.10 because it is also\nrelated to the <code>BoxedRep</code> proposal that introduced a constructor application\nin a commonly used <code>RuntimeRep</code>.</p></li><li><p><strong>sized literals</strong>: support for new sized literals have been added to the code\ngenerator.</p></li></ul><p>Now that have achieved a build process that actually produces a JS cross compiler, we are confronting and fixing issues in the produced JavaScript code, such as adding, managing, and debugging CPP conditional compilation blocks in JS shim files. You can follow our progress on our development branch <a href=\"https://gitlab.haskell.org/ghc/ghc/-/tree/wip/js-staging\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"external-static-plugins\">External Static Plugins<a class=\"hash-link\" href=\"#external-static-plugins\" title=\"Direct link to heading\">​</a></h2><p>GHC doesn't support plugins in cross-compilers <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/14335\" target=\"_blank\" rel=\"noopener noreferrer\">#14335</a>.\nSome time ago, we came up with a solution called \"external static plugins\" <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377\" target=\"_blank\" rel=\"noopener noreferrer\">!7377</a>.\nThese are plugins that are directly loaded from shared libaries, bypassing the issue with usual plugins.</p><p>Our colleague Shea Levy confirmed that the approach works, backported it to GHC 8.10, and has been working on making it work in stage1 cross-compilers for Windows.\nKudos for this work, Shea.</p><p>As the current user-interface based on environment variables isn't convenient, we have been working on adding new command-line flags to GHC instead.\nWe expect to propose this for integration into GHC when the new interface will be fully implemented.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"blog-posts\">Blog posts<a class=\"hash-link\" href=\"#blog-posts\" title=\"Direct link to heading\">​</a></h2><p>Inspired by our friends and colleagues at Well-Typed and Tweag, we have been starting to write blog posts for IOG's engineering blog.\nThey will mostly be about stuff we are working on or that we are interested in.\nFeel free to send us feedback about these posts and to send us topics you would be interested to read about.</p><ul><li><a href=\"https://engineering.iog.io/2022-04-28-on-the-inlining-of-integer-and-natural-operations\" target=\"_blank\" rel=\"noopener noreferrer\">https://engineering.iog.io/2022-04-28-on-the-inlining-of-integer-and-natural-operations</a></li><li><a href=\"https://engineering.iog.io/2022-05-02-setup-ext-stg-interp\" target=\"_blank\" rel=\"noopener noreferrer\">https://engineering.iog.io/2022-05-02-setup-ext-stg-interp</a></li><li><a href=\"https://engineering.iog.io/2022-05-17-javascript-template-haskell-external-interpreter\" target=\"_blank\" rel=\"noopener noreferrer\">https://engineering.iog.io/2022-05-17-javascript-template-haskell-external-interpreter</a></li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"haskell-optimization-handbook\">Haskell Optimization Handbook<a class=\"hash-link\" href=\"#haskell-optimization-handbook\" title=\"Direct link to heading\">​</a></h2><p>The \"Haskell Optimization Handbook\" is an <a href=\"https://github.com/haskellfoundation/tech-proposals/blob/main/proposals/accepted/026-haskell-optimization-handbook.md\" target=\"_blank\" rel=\"noopener noreferrer\">accepted proposal</a> of the Haskell Foundation.\nJeff has been working behind the scene to make this proposal concrete.\nMore about this in the upcoming months.</p>",
            "url": "https://engineering.iog.io/ghc-update-2022-05",
            "title": "GHC May 2022 Update",
            "summary": "This is the May 2022 monthly update from the GHC DevX team at IOG.",
            "date_modified": "2022-06-30T12:48:43.260Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "/2022/05/24/april-GHCJS-Objectable-vs-GHC-Binary",
            "content_html": "<p>As part of the integration of GHCJS into GHC as a cross-compilation backend, we've converted the binary serialisation that GHCJS previously used, which was via its <code>Objectable</code> typeclass, into GHC's internal <code>Binary</code> typeclass representation. In doing this, we gain access to instances for serialising many of GHC's internal data types, and, importantly, we can reuse GHC's mechanism for serialising its <code>Name</code> and <code>FastString</code> types, which are written to lookup tables in order to maintain identity, as well as allowing for space savings on disk.</p><p>In this post, we will explain how the GHC <code>Binary</code> and GHCJS <code>Objectable</code> approaches work, and compare their tradeoffs.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"how-ghc-binary-works\">How GHC Binary Works<a class=\"hash-link\" href=\"#how-ghc-binary-works\" title=\"Direct link to heading\">​</a></h2><p>Internally, GHC uses the <code>Name</code> data type to track the uniqueness of objects during compilation. Amongst information relating to the definition of a <code>Name</code> within the Haskell source, a <code>Name</code> also contains a <code>Unique</code> integer (the value of which is provided by the complation environment monad). Using this <code>Unique</code> integer, which is unpacked in <code>Name</code>'s definition, we can make O(1) equality comparisons without following further memory references - allowing for this operation to be very quick, which will have a large effect on compilation performance given how often it is used.</p><p><code>FastString</code> is used within GHC to store short, string-like data, and, similarly to <code>Name</code>, <code>FastString</code> uses a unique integer to allow for very fast equality comparisons. Primarily, <code>FastString</code> is used to represent variables and other definitions, and is used both in <code>Name</code> as the string-representation of a name with extra information attached, as well as directly, representing names that don't require this extra information, such as local variables.</p><p>In GHC's <code>.hi</code> interface files, <code>Name</code> and <code>FastString</code> are serialised differently compared to other data structures. They are written in the main data structure payload as indicies of a table, and these tables contain the actual string-like data of these types. So, an interface file might resemble:</p><ul><li>Header<ul><li>Magic number for recognising interface files</li><li>Pointer to <code>Name</code> symbol table</li><li>Pointer to <code>FastString</code> dictionary</li></ul></li><li>Main data structure payload</li><li><code>Name</code> symbol table</li><li><code>FastString</code> dictionary</li></ul><p>Importantly, the <code>FastString</code> dictionary must be written <em>after</em> the <code>Name</code> symbol table, because <code>Name</code>s contain <code>FastString</code>s, so writing the symbol table will expand the dictionary. Additionally, because we only have one buffer, and we don't know the size of the payload until it's written, the tables cannot be written in the header, and instead serialisation code must reserve space for the table pointers and jump back to write the pointers once the table locations are known.</p><p>During serialisation, GHC uses mutable data structures to store both the serialised binary buffer, as well as these tables:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">data BinHandle</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  = BinMem {                     -- binary data stored in an unboxed array</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">     bh_usr :: UserData,         -- sigh, need parameterized modules :-)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">     _off_r :: !FastMutInt,      -- the current offset</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">     _sz_r  :: !FastMutInt,      -- size of the array (cached)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">     _arr_r :: !(IORef BinArray) -- the array (bounds: (0,size-1))</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">data UserData =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   UserData {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        -- for *deserialising* only:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        ud_get_name :: BinHandle -&gt; IO Name,</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        ud_get_fs   :: BinHandle -&gt; IO FastString,</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        -- for *serialising* only:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        ud_put_nonbinding_name :: BinHandle -&gt; Name -&gt; IO (),</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        -- ^ serialize a non-binding 'Name' (e.g. a reference to another</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        -- binding).</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        ud_put_binding_name :: BinHandle -&gt; Name -&gt; IO (),</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        -- ^ serialize a binding 'Name' (e.g. the name of an IfaceDecl)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        ud_put_fs   :: BinHandle -&gt; FastString -&gt; IO ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   }</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Here, we see that various functions are stored in the handle structure, to be later referenced by their respective types in their <code>GHC.Utils.Binary.Binary</code> typeclass instances. Notice that the instance of <code>Binary Name</code> references <code>ud_put_nonbinding_name</code> and <code>ud_get_name</code>. Similarly, the <code>Binary FastString</code> instance uses <code>ud_put_fs</code> and <code>ud_get_fs</code>.</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">class Binary a where</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    put_   :: BinHandle -&gt; a -&gt; IO ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    put    :: BinHandle -&gt; a -&gt; IO (Bin a)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    get    :: BinHandle -&gt; IO a</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">instance Binary FastString where</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  put_ bh f =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    case getUserData bh of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        UserData { ud_put_fs = put_fs } -&gt; put_fs bh f</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  get bh =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    case getUserData bh of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        UserData { ud_get_fs = get_fs } -&gt; get_fs bh</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">instance Binary Name where</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   put_ bh name =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      case getUserData bh of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        UserData{ ud_put_nonbinding_name = put_name } -&gt; put_name bh name</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   get bh =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      case getUserData bh of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        UserData { ud_get_name = get_name } -&gt; get_name bh</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>In <code>GHC.Iface.Binary</code>, helper types and functions are defined to store the <code>Name</code> symbol table and <code>FastString</code> dictionary in a mutable data structure. Here, <code>putFastString</code> is intended to be partially applied - passing it an appropriately initialised <code>BinDictionary</code> so that the resulting function can be stored in the <code>us_put_fs</code> field of the <code>UserData</code>. <code>allocateFastString</code> does the low-level work here, incrementing the index and modifying the mutable map (stored as a <code>UniqFM</code>, which is map keyed on types that contain <code>Unique</code>s - recalling that these are used for fast equality comparisons):</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">data BinDictionary = BinDictionary {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        bin_dict_next :: !FastMutInt, -- The next index to use</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        bin_dict_map  :: !(IORef (UniqFM FastString (Int,FastString)))</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                                -- indexed by FastString</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">putFastString :: BinDictionary -&gt; BinHandle -&gt; FastString -&gt; IO ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">putFastString dict bh fs = allocateFastString dict fs &gt;&gt;= put_ bh</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">allocateFastString :: BinDictionary -&gt; FastString -&gt; IO Word32</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">allocateFastString BinDictionary { bin_dict_next = j_r,</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                                   bin_dict_map  = out_r} f = do</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    out &lt;- readIORef out_r</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    let !uniq = getUnique f</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    case lookupUFM_Directly out uniq of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        Just (j, _)  -&gt; return (fromIntegral j :: Word32)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        Nothing -&gt; do</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">           j &lt;- readFastMutInt j_r</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">           writeFastMutInt j_r (j + 1)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">           writeIORef out_r $! addToUFM_Directly out uniq (j, f)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">           return (fromIntegral j :: Word32)</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Later, in <code>GHC.Iface.Binary</code>, <code>getWithUserData</code> and <code>putWithUserData</code> will structure the header, and initialise the <code>UserData</code> functions to write to/read from mutable tables. Notice that we must first reserve header space for pointers to the lookup tables, as well as initialise the mutable tables, write these initialised structures to the <code>UserData</code> (for example, we see the previous <code>putFastString</code> partially applied here), then write the main payload, then write the lookup tables (<code>Name</code> symbol table first, because writing this can add to the <code>FastString</code> dictionary), and finally jump back to fill in the pointers to these tables:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">putWithUserData :: Binary a =&gt; TraceBinIFace -&gt; BinHandle -&gt; a -&gt; IO ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">putWithUserData traceBinIface bh payload = do</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Remember where the dictionary pointer will go</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dict_p_p &lt;- tellBin bh</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Placeholder for ptr to dictionary</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    put_ bh dict_p_p</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Remember where the symbol table pointer will go</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symtab_p_p &lt;- tellBin bh</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    put_ bh symtab_p_p</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Make some initial state</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symtab_next &lt;- newFastMutInt 0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symtab_map &lt;- newIORef emptyUFM</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    let bin_symtab = BinSymbolTable {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                         bin_symtab_next = symtab_next,</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                         bin_symtab_map  = symtab_map }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dict_next_ref &lt;- newFastMutInt 0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dict_map_ref &lt;- newIORef emptyUFM</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    let bin_dict = BinDictionary {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                       bin_dict_next = dict_next_ref,</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                       bin_dict_map  = dict_map_ref }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Put the main thing,</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    bh &lt;- return $ setUserData bh $ newWriteState (putName bin_dict bin_symtab)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                                                  (putName bin_dict bin_symtab)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                                                  (putFastString bin_dict)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    put_ bh payload</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Write the symtab pointer at the front of the file</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symtab_p &lt;- tellBin bh        -- This is where the symtab will start</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    putAt bh symtab_p_p symtab_p  -- Fill in the placeholder</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    seekBin bh symtab_p           -- Seek back to the end of the file</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Write the symbol table itself</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symtab_next &lt;- readFastMutInt symtab_next</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symtab_map  &lt;- readIORef symtab_map</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    putSymbolTable bh symtab_next symtab_map</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    case traceBinIface of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      QuietBinIFace         -&gt; return ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      TraceBinIFace printer -&gt;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">         printer (text \"writeBinIface:\" &lt;+&gt; int symtab_next</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                                        &lt;+&gt; text \"Names\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- NB. write the dictionary after the symbol table, because</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- writing the symbol table may create more dictionary entries.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Write the dictionary pointer at the front of the file</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dict_p &lt;- tellBin bh          -- This is where the dictionary will start</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    putAt bh dict_p_p dict_p      -- Fill in the placeholder</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    seekBin bh dict_p             -- Seek back to the end of the file</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    -- Write the dictionary itself</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dict_next &lt;- readFastMutInt dict_next_ref</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dict_map  &lt;- readIORef dict_map_ref</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    putDictionary bh dict_next dict_map</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    case traceBinIface of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      QuietBinIFace         -&gt; return ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      TraceBinIFace printer -&gt;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">         printer (text \"writeBinIface:\" &lt;+&gt; int dict_next</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                                        &lt;+&gt; text \"dict entries\")</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>In summary, we see a number of structural characteristics of code using GHC's Binary implementation:</p><ul><li>Use of a single buffer means that the lookup tables can't be written in the header, so we have to reserve space for table pointers in the header, and jump back once we know where they will be located in order to write the pointers to the buffer. Essentially, an ordering of file sections is enforced by the data dependencies of the payload containing <code>Name</code>s and <code>FastString</code>s, and <code>Name</code>s containing <code>FastString</code>s - which means these must be written in this order, but reading must be done in the reverse order, causing the need for pointers in the header.</li><li>Jumping around in binary buffers results in weakly enforced types and fiddly, code that Haskell's type system isn't able to help us debug</li><li>Must carry about read/write functions for the lookup table types (<code>Name</code> and <code>FastString</code>), which are <code>undefined</code> during the opposite serialisation stage, and are hard-coded into the handle, reducing extensibility.</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"how-objectable-works\">How Objectable Works<a class=\"hash-link\" href=\"#how-objectable-works\" title=\"Direct link to heading\">​</a></h2><p>In comparison, GHCJS previously involved using instances of the <code>Objectable</code> typeclass to serialise its interface files:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import qualified Data.Binary as DB</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">data SymbolTable</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  = SymbolTable !Int !(Map ShortText Int)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  deriving (Show)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">type PutSM = St.StateT SymbolTable DB.PutM -- FIXME: StateT isn't strict enough apparently</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">type PutS  = PutSM ()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">type GetS  = ReaderT ObjEnv DB.Get</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">class Objectable a where</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  put :: a -&gt; PutS</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  get :: GetS a</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  putList :: [a] -&gt; PutS</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  putList = putListOf put</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  getList :: GetS [a]</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  getList = getListOf get</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Here we see that GHCJS has opted for a different approach that avoids the mutable buffer by instead using <code>Data.Binary</code> instances that work via concatenating lazy <code>ByteString</code>s. Additionally, the mutable tables are replaced with a <code>State</code> monad that holds the symbol table as a <code>Map</code> structure.</p><p>Because <code>Data.Binary</code> forms lazy <code>ByteString</code>s, it's trivial to serialise the individual parts of the interface file and later concatenate these using <code>ByteString</code>'s monoid instance - allowing for all of the sections of the file to be defined declaratively at the top-level of the function in order of their appearance within the file.</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">object'</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  :: ModuleName                 -- ^ module</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  -&gt; SymbolTable                -- ^ final symbol table</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  -&gt; Deps                       -- ^ dependencies</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  -&gt; [([ShortText],ByteString)] -- ^ serialized units and their exported symbols, the first unit is module-global</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  -&gt; ByteString</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">object' mod_name st0 deps0 os = hdr &lt;&gt; symbs &lt;&gt; deps1 &lt;&gt; idx &lt;&gt; mconcat (map snd os)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  where</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hdr          = putHeader (Header (moduleNameTag mod_name) (bl symbs) (bl deps1) (bl idx))</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    bl           = fromIntegral . B.length</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    deps1        = putDepsSection deps0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    (sti, idx)   = putIndex st0 os</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    symbs        = putSymbolTable sti</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>In summary, the use of multiple <code>ByteString</code> sections that are later concatenated offer several different structural characteristics compared to the use of a single mutable buffer:</p><ul><li>The final ordering of the sections is flexible, because they are serialsied separately, so any data dependencies don't introduce ordering in the file - which we see in the <code>where</code> clause of <code>object'</code></li><li>Types are more strongly enforced because imperative <code>seekBin</code> instructions aren't required. However, each section is still <em>deserialised</em> by taking a substring of the file to be read as that section type. Of course, all serialisation eventually results in raw binary, so the simplification of concatenating the sections into the final file without jumping around limits the places that bugs can hide</li><li>Visually, the ordering of the sections within the final file is very clear - we see in <code>object'</code> that every section is simply listed <em>in order</em> on one line, concatenated together.</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"conclusion\">Conclusion<a class=\"hash-link\" href=\"#conclusion\" title=\"Direct link to heading\">​</a></h2><p>Making use of GHC's existing infrastructure lets the GHCJS backend to make use of the <code>FastString</code> and <code>Name</code> data types, as well as allowing for the removal of a significant amount of now-redundant code.</p><p>Additionally, interface file generation using GHC's <code>Binary</code> appears to be very fast - for example, attempts to hide the handle behind a reader monad significantly reduce the compiler's performance as measured by CI. Speculatively, looking at the generated core, this could be because the optimiser has a much better time with the style of IO code that is used - rather than being a limitation of more abstacted approaches.</p><p>The comparison provided the GHCJS's old approach makes it clear that GHC's <code>Binary</code> implementation, while very useful, has potential to be improved in both readability and extensiblity. However, because CI has shown that serialisation performance has a significant effect on overall compilation performance, this tradeoff must be considered when making any changes. Potentially, these readability shortfalls in GHC's implementation might just be the result of legacy code, and so benchmarks of other approaches, such as <code>Data.Binary</code>, should be used to guide future work in improving the readability and flexibility of GHC's serialisation without sacrificing performance.</p>",
            "url": "https://engineering.iog.io/2022/05/24/april-GHCJS-Objectable-vs-GHC-Binary",
            "title": "Objectable vs GHC Binary",
            "summary": "As part of the integration of GHCJS into GHC as a cross-compilation backend, we've converted the binary serialisation that GHCJS previously used, which was via its Objectable typeclass, into GHC's internal Binary typeclass representation. In doing this, we gain access to instances for serialising many of GHC's internal data types, and, importantly, we can reuse GHC's mechanism for serialising its Name and FastString types, which are written to lookup tables in order to maintain identity, as well as allowing for space savings on disk.",
            "date_modified": "2022-05-24T00:00:00.000Z",
            "tags": []
        },
        {
            "id": "2022-05-17-javascript-template-haskell-external-interpreter",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"introduction\">Introduction<a class=\"hash-link\" href=\"#introduction\" title=\"Direct link to heading\">​</a></h2><p>At IOG DevX we have been working on integrating various bits of GHCJS into GHC, with the goal of having a fully working JavaScript backend for the 9.6 release. For some parts this has mostly consisted of an update of the code to use the newer GHC API and dependencies. Other bits, like the Template Haskell runner, need more work.</p><p>This post gives an overview of the existing approaches for running Template Haskell in GHC based cross compilers and our plan for the JavaScript backend. Hopefully we can revisit this topic once all the work has been done, and see what exactly we ended up with.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"the-ghcjs-template-haskell-runner\">The GHCJS Template Haskell Runner<a class=\"hash-link\" href=\"#the-ghcjs-template-haskell-runner\" title=\"Direct link to heading\">​</a></h2><p>When I first worked on Template Haskell (TH) support for GHCJS, there was no mechanism to combine Template Haskell with cross compilation in GHC.</p><p>Normally, Template Haskell is run by loading library code directly into the GHC process and using the bytecode interpreter for the current module. Template Haskell can directly access GHC data structures through the <code>Q</code> monad. Clearly this would not be possible for GHCJS: We only have JavaScript code available for the libraries and the organization of the JavaScript data structures is very different from what GHC uses internally.</p><p>So I had to look for an alternative. Running Template Haskell consists of two parts:</p><ol><li>loading/executing the TH code</li><li>handling compiler queries from the TH code, for example looking up names or types</li></ol><p>Running the TH code can be done by first compiling the Haskell to JavaScript and then using the JavaScript <code>eval</code> feature.</p><p>Template Haskell code can query the compiler using the <code>Quasi</code> typeclass. I noticed that none of the methods required passing around functions or complicated data structures, so it would be possible to serialize each request and response and send it to another process.</p><p>So I went ahead and implemented this approach with a script <code>thrunner.js</code> to load and start the code in a node.js server, a message type with serialization, and a new instance of the <code>Quasi</code> typeclass to handle the communication with the compiler via the messages. This is still what's in use by GHCJS to this day. Every time GHCJS encounters Template Haskell, it starts a <code>thrunner</code> process and the compiler communicates with it over a pipe.</p><p>After starting <code>thrunner.js</code> GHCJS sends the Haskell parts of the Template Haskell runnner to the script. This includes the runtime system and the implementation of the <code>Quasi</code> typeclass and communication protocol. After that, the TH session starts. A typical TH session looks as follows:</p><table><thead><tr><th align=\"left\">Compiler</th><th align=\"left\">thrunner</th></tr></thead><tbody><tr><td align=\"left\"><code>RunTH THExp &lt;js code&gt; &lt;source location&gt;</code></td><td align=\"left\"></td></tr><tr><td align=\"left\"></td><td align=\"left\"><code>LookupName (Just &lt;name-string&gt;)</code></td></tr><tr><td align=\"left\"><code>LookupName' (Just &lt;name&gt;)</code></td><td align=\"left\"></td></tr><tr><td align=\"left\"></td><td align=\"left\"><code>Reify &lt;name&gt;</code></td></tr><tr><td align=\"left\"><code>Reify' &lt;name-info&gt;</code></td><td align=\"left\"></td></tr><tr><td align=\"left\"></td><td align=\"left\"><code>RunTH' &lt;result&gt;</code></td></tr><tr><td align=\"left\"><code>RunTH THDec &lt;js code&gt; &lt;source location&gt;</code></td><td align=\"left\"></td></tr><tr><td align=\"left\"></td><td align=\"left\"><code>AddTopDecls &lt;declarations&gt;</code></td></tr><tr><td align=\"left\"><code>AddTopDecls'</code></td><td align=\"left\"></td></tr><tr><td align=\"left\"></td><td align=\"left\"><code>RunTH' &lt;result&gt;</code></td></tr><tr><td align=\"left\"><code>FinishTH True</code></td><td align=\"left\"></td></tr><tr><td align=\"left\"></td><td align=\"left\"><code>FinishTH' &lt;memory-consumption&gt;</code></td></tr></tbody></table><p>Each message is followed up by a corresponding reply. For example, a <code>LookupName'</code> response follows a <code>LookupName</code> request and a <code>RunTH</code> message will eventually generate a <code>RunTH'</code> result. The first <code>RunTH</code> message contains the compiled JavaScript for the Template Haskell code, along with its dependencies. Each subsequent <code>RunTH</code> only includes dependencies that have not already been sent.</p><p>The <code>thrunner</code> process stays alive during the compilation of at least an entire module, allowing for persistent state (<code>putQ</code>/<code>getQ</code>).</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"the-ghc-external-interpreter\">The GHC External Interpreter<a class=\"hash-link\" href=\"#the-ghc-external-interpreter\" title=\"Direct link to heading\">​</a></h2><p>If we build a Haskell program with (cost centre) profiling, the layout of our data structures changes to include bookkeeping of cost centre information. This means that we need a special profiling runtime system to run this code.</p><p>What can we do if we want to run our profiled build in GHCi or Template Haskell? We cannot load compiled profiling libraries into GHC directly; its runtime system expects non-profiled code. We could use a profiled version of the compiler itself, but this would make all compilation very slow. Or we could somehow separate the profiled code of our own program from the non-profiled code in the compiler.</p><p>This was Simon Marlow's motivation for adapting the GHCJS <code>thrunner</code> approach, integrating in GHC and extending it it to support GHCi and bytecode. This functionality can be activated with the <code>-fexternal-interpreter</code> flag and has been available since GHC version 8.0.1. When the external interpreter is activated, GHC starts a separate process, <code>iserv</code> (customizable with the <code>-pgmi</code> flag) which has the role analogous to the <code>thrunner</code> script for GHCJS.</p><p>Over time, the <code>iserv</code> code has evolved with GHC and has been extended to include more operations. By now, there are quite a few differences in features:</p><table><thead><tr><th align=\"left\">Feature</th><th align=\"center\">thrunner</th><th align=\"center\">iserv</th></tr></thead><tbody><tr><td align=\"left\">Template Haskell support</td><td align=\"center\">yes</td><td align=\"center\">yes</td></tr><tr><td align=\"left\">GHCi</td><td align=\"center\">no</td><td align=\"center\">yes</td></tr><tr><td align=\"left\">Debugger</td><td align=\"center\">no</td><td align=\"center\">yes</td></tr><tr><td align=\"left\">Bytecode</td><td align=\"center\">no</td><td align=\"center\">yes</td></tr><tr><td align=\"left\">Object code</td><td align=\"center\">through pipe</td><td align=\"center\">from file</td></tr><tr><td align=\"left\">Object code linking</td><td align=\"center\">compiler</td><td align=\"center\">iserv process</td></tr></tbody></table><p><code>thrunner</code> is not quite as complete as <code>iserv</code>: It lacks GHCi and the debugger, and there is no bytecode support. But these features are not essential for basic Template Haskell.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"proxies-and-bytecodes\">Proxies and Bytecodes<a class=\"hash-link\" href=\"#proxies-and-bytecodes\" title=\"Direct link to heading\">​</a></h2><p>We have now seen two systems for running Template Haskell code outside the compiler process: The original GHCJS <code>thrunner</code> and the extended GHC <code>iserv</code>.</p><p>Clearly it isn't ideal to have multiple \"external interpreter\" systems in GHC, therefore we plan to switch from <code>thrunner</code> to <code>iserv</code> for the upcoming JavaScript GHC backend. We don't need the debugger or GHCi support yet, but we do need to adapt to other changes in the infrastructure. So what does this mean in practice?</p><p>The biggest change is that we have to rework the linker: <code>thrunner</code> does not contain any linking logic by itself: GHCJS compiles everything to JavaScript and sends compiled code to the <code>thrunner</code> process, ready to be executed. In contrast, <code>iserv</code> has a loader for object and archive files. When dependencies need to be loaded into the interpreter, GHC just gives it the file name.</p><p>Another change is using the updated message types. In the <code>thrunner</code> session example above we could see that each message is paired with a response. For example a <code>RunTH'</code> response always follows a <code>RunTH</code> message, with possibly other messages in between. <code>iserv</code> has an interesting approach for the <code>Message</code> datatype: Instead of having pairs of data constructors for each message and its response, <code>iserv</code> has a GADT <code>Message a</code>, where the <code>a</code> type parameter indicates the expected response payload for each data constructor.</p><p>During development of the <code>thrunner</code> program it turned out to be very useful to save and replay Template Haskell sessions for debugging purposes. We'd like to do this again, but now saving the message in a readable/writable format. Since we're dealing with JavaScript, JSON appears to be the obvious choice.</p><p>Our plan is to have an <code>iserv</code> implementation that consists of a JavaScript part that runs in node.js and a proxy process to handle communication with GHC. The proxy process converts the messages between GHC's own (<code>binary</code> based) serialization format and JSON. The proxy process is relatively simple, but it does reveal one downside of the new GADT based message types: A proxy is stateful. We must always know which message we have sent to convert the response back from JSON to <code>binary</code>.</p><p>It's not yet known whether we will implement a full bytecode interpreter. We expect it to become clear during implementation whether we can get away without one early on.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"conclusion\">Conclusion<a class=\"hash-link\" href=\"#conclusion\" title=\"Direct link to heading\">​</a></h2><p>We have seen how Template Haskell and GHCi code can be run outside the GHC process for profiling or cross compiling, with both the <code>thrunner</code> approach in GHCJS and the newer <code>iserv</code> in GHC.</p><p>We at IOG DevX are working on switching to the <code>iserv</code> infrastructure for the upcoming GHC JavaScript backend, which involves a substantial rewrite, mainly because of differences in linking. This is a work in progress, and we intend to revisit this topic in another blog post once the final design has been implemented.</p>",
            "url": "https://engineering.iog.io/2022-05-17-javascript-template-haskell-external-interpreter",
            "title": "JavaScript, Template Haskell and the External Interpreter",
            "summary": "Introduction",
            "date_modified": "2022-05-17T00:00:00.000Z",
            "author": {
                "name": "Luite Stegeman"
            },
            "tags": [
                "ghc ghcjs javascript tooling profiling"
            ]
        },
        {
            "id": "ghc-update-2022-04",
            "content_html": "<p>Welcome to the (rather late) April 2022 monthly update from the GHC DevX team at IOG. Since the last update we've continued work on the upcoming JavaScript backend for GHC. Unfortunately, we have nothing to show quite yet but that doesn't mean nothing has happened! On the contrary, we've made great progress and are close to that crucial first milestone <code>hello world</code>. Besides our work on the JavaScript backend, we were pleased to finally push through the <a href=\"https://hsyl20.fr/home/posts/2022-05-03-modularizing-ghc-paper.html\" target=\"_blank\" rel=\"noopener noreferrer\">Modularizing GHC</a> paper that Sylvain has been working on for 2+ years! It causes quite the splash on the Haskell discourse and reddit, we recommend reading it if you haven't already (links below). Alright, enough introduction let's get into the update.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"javascript-backend\">JavaScript Backend<a class=\"hash-link\" href=\"#javascript-backend\" title=\"Direct link to heading\">​</a></h2><p>We have made the following progresses in the implementation of a JavaScript\nbackend for GHC (adapted from GHCJS):</p><ul><li><p><strong>linker</strong>: ported GHCJS's linker code into GHC. A lot of code was duplicated from GHC and\nslightly modified for GHCJS's needs, making the process far from trivial.</p></li><li><p><strong>testsuite</strong>: fixed Hadrian to run GHC's testsuite with cross-compilers\n<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7850\" target=\"_blank\" rel=\"noopener noreferrer\">!7850</a>. There are\nremaining issues though (see\n<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/21292\" target=\"_blank\" rel=\"noopener noreferrer\">#21292</a>).</p></li><li><p><strong>build system</strong>: fixes for GHC's configure script were ported (e.g. support for\nthe \"ghcjs\" target in <code>config.sub</code>). GHCJS's custom\nbuild script was integrated into <code>configure.ac</code>. We can now\nconfigure the build with: <code>./configure --target=js-unknown-ghcjs</code></p></li><li><p><strong>TH</strong>: we have conducted some experiments to find the best way to bridge GHCJS's\nTH runner and GHC's external interpreter. This will be described in details in\na future blog post.</p></li><li><p><strong>FFI</strong>: basic support for JavaScript FFI has been ported from GHCJS to GHC. We\nhaven't ported the JavaScript parser, so we have dropped the fancy import\nsyntax (e.g. \"$1.xyz\"). It should be enough to build boot libraries and we\nwill add JS parsing support later.</p></li></ul><p>At this stage, we are working on building boot libraries and on supporting\nlinking with the JS RTS.</p><p>Development happens in the following branch: <a href=\"https://gitlab.haskell.org/ghc/ghc/-/tree/wip/js-staging\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitlab.haskell.org/ghc/ghc/-/tree/wip/js-staging</a></p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"modularity-paper\">Modularity paper<a class=\"hash-link\" href=\"#modularity-paper\" title=\"Direct link to heading\">​</a></h2><p>Sylvain, Jeffrey, and John Ericson (from Obsidian Systems) wrote a paper about\n\"modularizing GHC\" using domain-driven design.</p><ul><li>Announce blog post: <a href=\"https://hsyl20.fr/home/posts/2022-05-03-modularizing-ghc-paper.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://hsyl20.fr/home/posts/2022-05-03-modularizing-ghc-paper.html</a></li><li>Paper: <a href=\"https://hsyl20.fr/home/files/papers/2022-ghc-modularity.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://hsyl20.fr/home/files/papers/2022-ghc-modularity.pdf</a></li><li>Reddit: <a href=\"https://www.reddit.com/r/haskell/comments/uhdu4l/modularizing_ghc_paper/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.reddit.com/r/haskell/comments/uhdu4l/modularizing_ghc_paper/</a></li><li>Discourse: <a href=\"https://discourse.haskell.org/t/modularizing-ghc-paper/4471\" target=\"_blank\" rel=\"noopener noreferrer\">https://discourse.haskell.org/t/modularizing-ghc-paper/4471</a></li></ul><p>We've got a lot of great feedback about it (expect a first revision soon).\nWe also got a GHC contribution directly inspired by the paper (see\n<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8160\" target=\"_blank\" rel=\"noopener noreferrer\">!8160</a>) which was\nvery welcome!</p>",
            "url": "https://engineering.iog.io/ghc-update-2022-04",
            "title": "GHC April 2022 Update",
            "summary": "Welcome to the (rather late) April 2022 monthly update from the GHC DevX team at IOG. Since the last update we've continued work on the upcoming JavaScript backend for GHC. Unfortunately, we have nothing to show quite yet but that doesn't mean nothing has happened! On the contrary, we've made great progress and are close to that crucial first milestone hello world. Besides our work on the JavaScript backend, we were pleased to finally push through the Modularizing GHC paper that Sylvain has been working on for 2+ years! It causes quite the splash on the Haskell discourse and reddit, we recommend reading it if you haven't already (links below). Alright, enough introduction let's get into the update.",
            "date_modified": "2022-05-13T00:00:00.000Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "2022-05-02-setup-ext-stg-interp",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"table-of-contents\">Table of Contents<a class=\"hash-link\" href=\"#table-of-contents\" title=\"Direct link to heading\">​</a></h2><ul><li><a href=\"#orgfeb334e\">Making sense of the project</a></li><li><a href=\"#org1d461dc\">Building a working external STG interpreter</a><ul><li><a href=\"#orgb670539\">ghc.nix</a></li><li><a href=\"#orgbb3f1d5\">Building ghc-wpc</a></li><li><a href=\"#org9ef4bc5\">Building the stg tooling</a></li></ul></li><li><a href=\"#org4a2eaf9\">Building the external-stg-interpreter</a></li><li><a href=\"#org1d34a2e\">Linking the external-stg-interpreter</a></li><li><a href=\"#org2daa4b8\">The whole setup process on a demo</a></li><li><a href=\"#org8193a1a\">Summary</a><ul><li><a href=\"#org940ba90\">File Descriptions</a></li><li><a href=\"#org8e9f409\">Step-by-Step guide for running the interpreter on your code</a></li></ul></li></ul><p>Haskell is a great language camouflaged by lackluster tooling. This situation\nhas led to well-known problems (who could forget Cabal hell?). A less discussed\nproblem is what I will call the <!-- -->“<!-- -->Black-box syndrome<!-- -->”<!-- -->: It is hard to\nknow <em>exactly</em> what the memory representation and runtime performance of my\nHaskell programs are<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Now black-box syndrome is not <em>only</em> a problem,\nit is also one of the nice features in the language since like all good\nabstractions it elides things I<!-- -->’<!-- -->d rather not care about, at least most of\nthe time. In other words, I am happy I don<!-- -->’<!-- -->t have to do manual memory\nmanipulation!</p><p>However, when I have my optimization hat on, I run face first into black-box syndrome. The crux of the problem is a tension between the need for observation during performance engineering and optimization, and the need to ship fast code. During development we want to be able to open up a system, see exactly how it is working, make tweaks, package it back up and test again. I want to be able to answer questions like <!-- -->“<!-- -->Why is my executable this size?<!-- -->”<!-- -->, <!-- -->“<!-- -->Which code is a hot loop?<!-- -->”<!-- -->, or <!-- -->“<!-- -->When does my code do direct, known or unknown function calls?<!-- -->”<!-- -->.</p><p>In order to answer these questions we need the ability to observe <em>every part of that system as the machine experiences it</em>, without this ability we have no way to make progress other than test, change some code, compile and test again in an ad-hoc manner. And therein lies the problem, most Haskell tooling is insufficient to provide the observability that we would like, instead the tooling often expects and requires us to make source code changes to our program or even recompile all of our libraries and code for a profiling way. This leads to the idea and <em>the expectation</em> in the Haskell community that Haskell programs are hard to optimize because the barrier to entry for optimization has artificially increased.</p><p><a href=\"https://www.patreon.com/csaba_hruska\" target=\"_blank\" rel=\"noopener noreferrer\">Csaba Hruska</a> has recently been making headway in this area with his work on the <a href=\"https://youtu.be/iXhh0NSR67k\" target=\"_blank\" rel=\"noopener noreferrer\">GRIN</a> compiler and an external STG interpreter. His STG interpreter (and patched ghc) exactly solve these problems and he has demonstrated dumping the entire call graph of large Haskell projects, filter to hot loops and finding unknown function calls in these graphs. If you haven<!-- -->’<!-- -->t seen his <a href=\"https://www.youtube.com/watch?v=wt6iCgYmVGA&amp;t=2054s\" target=\"_blank\" rel=\"noopener noreferrer\">demo</a> be sure to watch it, it is well worth your time.</p><p>This post is the first in a new blog series. In this blog series we<!-- -->’<!-- -->re going to kick the tires on the external STG interpreter see what it can do, and what we can uncover in some popular libraries by using it. In particular, I<!-- -->’<!-- -->m interested in running it on projects I<!-- -->’<!-- -->ve previously optimized<!-- -->—<!-- -->such as ghc itself, containers, unordered-containers<!-- -->—<!-- -->using the standard methods: ticky-ticky profiling, prof, flamegraphs, heap profiling, ghc-debug, cachegrind etc. This post, however, will be focused on setting up the patched ghc and interpreter on a NixOS system. My goals are threefold:</p><ol><li>Give an overview of the project and project layout to lower barrier to entry for the system.</li><li>Give step by step instructions on setting up the interpreter on a nix-based system and provide a forked github repo for nix users. This should allow nix users to just <code>git clone foo</code> and <code>nix-build</code> (spoiler: it won<!-- -->’<!-- -->t be that easy but still not hard.)</li><li>Popularize Csaba<!-- -->’<!-- -->s project! It is a refreshing take on Haskell optimization and compilation.</li></ol><a id=\"orgfeb334e\"></a><h1>Making sense of the project</h1><p>The external STG interpreter is part of the <a href=\"https://github.com/grin-compiler\" target=\"_blank\" rel=\"noopener noreferrer\">GRIN compiler</a> project. We are not doing anything with the GRIN compiler (yet!) and so we are only interested in <a href=\"https://github.com/grin-compiler/ghc-whole-program-compiler-project\" target=\"_blank\" rel=\"noopener noreferrer\">The GHC whole compiler project</a>. The whole-compiler-project has several sub-projects that we<!-- -->’<!-- -->ll be building and using directly:</p><ul><li><a href=\"https://github.com/grin-compiler/ghc-whole-program-compiler-project/tree/master/external-stg\" target=\"_blank\" rel=\"noopener noreferrer\">external-stg</a>: This subproject provides utilites we<!-- -->’<!-- -->ll be using, in particular <code>mkfullpak</code></li><li><a href=\"https://github.com/grin-compiler/ghc-whole-program-compiler-project/tree/master/external-stg-interpreter\" target=\"_blank\" rel=\"noopener noreferrer\">external-stg-interpreter</a>: This is the actual STG interpreter. The good news is that this is independent of the rest of the project and can be built just like a regular Haskell executable</li><li><a href=\"https://github.com/grin-compiler/ghc-wpc/tree/b51ab235f5c07caa5eb3dd3b40487f67f50fb838\" target=\"_blank\" rel=\"noopener noreferrer\">ghc-wpc</a>: This is a fork of <code>ghc-8.10.x</code> (I<!-- -->’<!-- -->m not sure exactly which version it forks to be honest) which we must build in order to use the external STG interpreter. Ghc-wpc serves as a frontend for the external-stg-interpreter.</li></ul><a id=\"org1d461dc\"></a><h1>Building a working external STG interpreter</h1><p>The external STG interpreter can be built like any regular haskell executable. But in order to use the interpreter we have to build <code>ghc-wpc</code>. <code>ghc-wpc</code> is necessary because it serves as a frontend for the STG interpreter. It compiles a Haskell program like normal and then dumps an enriched STG IR to file. This file is then run through a utility <code>gen-exe</code> (gen-exe is an executable built in the <a href=\"https://github.com/grin-compiler/ghc-whole-program-compiler-project/tree/master/external-stg-compiler\" target=\"_blank\" rel=\"noopener noreferrer\">external-stg-compiler</a> sub-project) which picks up the compilation pipeline from the STG IR and creates an executable like we would expect from a normal compilation pipeline.</p><p>The major difference between this process and the usual compiler pipeline is that <code>ghc-wpc</code> leaves enough compiler information on disk for the rest of the tooling to consume, namely, in files with a <code>*.o_stgbin</code> (this is STG IR generated at compile time), and <code>*.o_stgapp</code> (project linker and dependency information) extension. Thus, once we build this custom ghc version we can use it to build the source code we wish to analyze and begin our optimization work.</p><p>For the rest of this tutorial I<!-- -->’<!-- -->ll be referencing my <a href=\"https://github.com/doyougnu/ghc-whole-program-compiler-project\" target=\"_blank\" rel=\"noopener noreferrer\">fork</a> of the <code>ghc-whole-compiler-project</code> that includes everything you need if you want to follow along, including <code>.nix</code> files for creating a <code>nix-shell</code> which will prepare a suitable environment to run the entire toolchain.</p><a id=\"orgb670539\"></a><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"ghcnix\">ghc.nix<a class=\"hash-link\" href=\"#ghcnix\" title=\"Direct link to heading\">​</a></h2><p>The usual way to build ghc using a nix based system is with the <a href=\"https://github.com/alpmestan/ghc.nix\" target=\"_blank\" rel=\"noopener noreferrer\">ghc.nix</a> project. Ghc.nix provides a <code>default.nix</code> with a suitable environment to run hadrian and build ghc. For <code>ghc-wpc</code> we<!-- -->’<!-- -->ll need some special packages, and we need our boot compiler to be <em>exactly</em> <code>ghc-8.3.3</code>. The custom <code>ghc.nix</code> file is included in my fork, I<!-- -->’<!-- -->ve taken the liberty to pin the nixpkgs to the right version for <code>ghc-8.3.3</code>. So let<!-- -->’<!-- -->s begin:</p><p>Clone the forked repo:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">git</span><span class=\"token plain\"> clone https://github.com/doyougnu/ghc-whole-program-compiler-project.git</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> ghc-whole-program-compiler-project</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ tree -L </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token builtin class-name\">.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── dist-newstyle</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── external-stg</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── external-stg-compiler</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── external-stg-interpreter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── ghc.nix.wpc</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── ghc-wpc</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── lambda</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── mod-pak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── README.md</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── shell.nix</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── stack.yaml</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">└── stack.yaml.lock</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>You<!-- -->’<!-- -->ll find the patched <code>ghc.nix</code> included (<code>ghc.nix.wpc</code>) and a <code>shell.nix</code> for a <code>nix-shell</code>. The <code>shell.nix</code> file simply references <code>ghc.nix.wpc/default.nix</code> with the appropriate options:</p><div class=\"codeBlockContainer_I0IT language-nix theme-code-block\"><div class=\"codeBlockContent_wNvx nix\"><pre tabindex=\"0\" class=\"prism-code language-nix codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ cat shell.nix</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">import (./ghc.nix.wpc/default.nix) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">useClang = true;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">withHadrianDeps = true;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">withIde   = false;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">withLlvm  = true;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><a id=\"orgbb3f1d5\"></a><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"building-ghc-wpc\">Building ghc-wpc<a class=\"hash-link\" href=\"#building-ghc-wpc\" title=\"Direct link to heading\">​</a></h2><p>Now we can enter a nix-shell and build <code>ghc-wpc</code>:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">pwd</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">/home/doyougnu/programming/haskell/ghc-whole-program-compiler-project</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ nix-shell shell.nix  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># or just nix-shell</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">trace: checking </span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> /home/doyougnu/programming/haskell/ghc-whole-program-compiler-project/hadrian/hadrian.cabal is present:  no</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Recommended ./configure arguments </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">found </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> </span><span class=\"token variable\" style=\"color:#36acaa\">$CONFIGURE_ARGS</span><span class=\"token builtin class-name\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">or use the configure_ghc </span><span class=\"token builtin class-name\">command</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-gmp-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/sznfxigwvrvn6ar3nz3f0652zsld9xqj-gmp-6.2.0-dev/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-gmp-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/447im4mh8gmw85dkrvz3facg1jsbn6c7-gmp-6.2.0/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-curses-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/84g84bg47xxg01ba3nv0h418v5v3969n-ncurses-6.1-20190112-dev/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-curses-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/xhhkr936b9q5sz88jp4l29wljbbcg39k-ncurses-6.1-20190112/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libnuma-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/bfrcskjspk9a179xqqf1q9xqafq5s8d2-numactl-2.0.13/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libnuma-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/bfrcskjspk9a179xqqf1q9xqafq5s8d2-numactl-2.0.13/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libdw-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/sv6f05ngaarba50ybr6fdfc7cciv6nbv-elfutils-0.176/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libdw-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/sv6f05ngaarba50ybr6fdfc7cciv6nbv-elfutils-0.176/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --enable-dwarf-unwind</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:~/programming/haskell/ghc-whole-program-compiler-project</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Now we need to <code>cd</code> into <code>ghc-wpc</code> and tweak the hadrian build.</p><p><strong>MAJOR CONSTRAINT: You must build ghc-wpc with hadrian/build-stack</strong>, if you build in any other way you<!-- -->’<!-- -->ll run into shared object errors, see this <a href=\"https://github.com/grin-compiler/ghc-whole-program-compiler-project/issues/4\" target=\"_blank\" rel=\"noopener noreferrer\">ticket</a> for details.</p><p>So in order to build <code>ghc-wpc</code> with stack we<!-- -->’<!-- -->ll have to tweak the <code>stack.yaml</code> file. <strong>You must do this since it is not included in the fork</strong>:</p><p>Quick side note: To make the formatting nicer I truncate\n<code>nix-shell:~/foo/bar/baz/ghc-whole-program-compiler-project</code> to just <code>...</code>, so\n<code>nix-shell:.../ghc-wpc</code> is equivalent to\n<code>~/path/to/ghc-whole-compiler-project/ghc-wpc</code>.</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> ghc-wpc/hadrian/</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./ghc-wpc/hadrian</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">cat</span><span class=\"token plain\"> stack.yaml</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">resolver: lts-15.5</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">packages:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- </span><span class=\"token string\" style=\"color:#e3116c\">'.'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- </span><span class=\"token string\" style=\"color:#e3116c\">'GHC-Cabal'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">system-ghc: </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">nix:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   enable: </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   shell-file: </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/shell.nix</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>The changes are: (1) tell <code>stack</code> we are using <code>nix</code>, and (2) reference the <code>shell.nix</code> file which points to <code>ghc.wpc.nix</code> at the root of the project, i.e., <code>ghc-whole-program-compiler-project/shell.nix</code>.</p><p>Now we should be able to begin our build, return to the root of <code>ghc-wpc</code> and run the following:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./ghc-wpc/hadrian</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./ghc-wpc</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ ./boot </span><span class=\"token operator\" style=\"color:#393A34\">&amp;&amp;</span><span class=\"token plain\"> ./configure</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./ghc-wpc</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ hadrian/build-stack -j</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>and go get some coffee since this will take some time. Once it finishes you should have the <code>ghc-wpc</code> binary in <code>_build/stage1/bin</code></p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./ghc-wpc</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> -l _build/stage1/bin/</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">total </span><span class=\"token number\" style=\"color:#36acaa\">8592</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">1843752</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">23</span><span class=\"token plain\">:01 ghc</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">11082</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">23</span><span class=\"token plain\">:01 ghc.dyn_o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">  </span><span class=\"token number\" style=\"color:#36acaa\">660128</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:50 ghc-pkg</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">9977</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:50 ghc-pkg.dyn_o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">4624680</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">23</span><span class=\"token plain\">:01 haddock</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">16883</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">23</span><span class=\"token plain\">:01 haddock.dyn_o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">49344</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:25 hp2ps</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">2504</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:25 hp2ps.dyn_o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">  </span><span class=\"token number\" style=\"color:#36acaa\">716440</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:35 hpc</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">9959</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:35 hpc.dyn_o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">  </span><span class=\"token number\" style=\"color:#36acaa\">738544</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:35 hsc2hs</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">10264</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:35 hsc2hs.dyn_o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">58384</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:34 runghc</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">8864</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">29</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:34 runghc.dyn_o_ghc_stgapp</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Notice that this build dumped <code>*.&lt;way&gt;_o_ghc_stgapp</code> files!</p><a id=\"org9ef4bc5\"></a><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"building-the-stg-tooling\">Building the stg tooling<a class=\"hash-link\" href=\"#building-the-stg-tooling\" title=\"Direct link to heading\">​</a></h2><p>Now that we have a working <code>ghc-wpc</code> we need to build the rest of the project by pointing <code>stack</code> to the <code>ghc-wpc</code> binary in <code>ghc-wpc/_build/stage1/bin</code>. That is, we must change the <code>ghc-whole-program-compiler-project/stack.yaml</code> file:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:~/programming/haskell/ghc-whole-program-compiler-project</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">cat</span><span class=\"token plain\"> stack.yaml</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">resolver: lts-16.13</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">allow-newer: </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">packages:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - </span><span class=\"token string\" style=\"color:#e3116c\">'external-stg-compiler'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - </span><span class=\"token string\" style=\"color:#e3116c\">'external-stg'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ghc-options:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token string\" style=\"color:#e3116c\">\"</span><span class=\"token string variable\" style=\"color:#36acaa\">$everything</span><span class=\"token string\" style=\"color:#e3116c\">\"</span><span class=\"token builtin class-name\">:</span><span class=\"token plain\"> -fno-stgbin -fno-stgapp -optcxx-std</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">c++17</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">extra-deps:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - async-pool-0.9.1@sha256:4015140f896c3f1652b06a679b0ade2717d05557970c283ea2c372a71be2a6a1,1605</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - souffle-haskell-1.1.0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - zip-1.7.0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># use custom ext-stg whole program compiler GHC</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">compiler:     ghc-8.11.0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">skip-ghc-check: </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">nix:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  enable: </span><span class=\"token boolean\" style=\"color:#36acaa\">false</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># use local GHC (for development)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">system-ghc: </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">extra-path:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - /home/doyougnu/programming/haskell/ghc-whole-program-compiler-project/ghc-wpc/_build/stage1/bin</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># DEBUG INFO</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">#dump-logs: all</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">#build:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">#  keep-tmp-files: true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">#  cabal-verbose: true</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>The changes are: (1) set <code>compiler: ghc-8.11.0</code> (the <code>ghc-wpc</code> fork), (2) set <code>skip-ghc-check: true</code> so that stack doesn<!-- -->’<!-- -->t complain about the ghc version, (3) set <code>nix.enable: false</code>, confusingly if you leave this as true then stack will try to use <code>nixpkgs</code> to get a ghc binary, but we want it to use our local binary so we disable this even though we<!-- -->’<!-- -->ll still be in our original nix-shell (4) set <code>system-path: true</code> to tell stack we will be using a ghc we have on our system, and finally (5) set <code>extra-path: &lt;path-to-ghc-wpc-binary&gt;</code>.</p><p>Now we can run stack and install the stg tooling:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ stack --stack-root </span><span class=\"token variable\" style=\"color:#36acaa\">`</span><span class=\"token variable builtin class-name\" style=\"color:#36acaa\">pwd</span><span class=\"token variable\" style=\"color:#36acaa\">`</span><span class=\"token plain\">/.stack-root </span><span class=\"token function\" style=\"color:#d73a49\">install</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Trouble loading CompilerPaths cache: UnliftIO.Exception.throwString called with:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Compiler </span><span class=\"token function\" style=\"color:#d73a49\">file</span><span class=\"token plain\"> metadata mismatch, ignoring cache</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Called from:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  throwString </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">src/Stack/Storage/User.hs:277:8 </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> stack-2.7.5-9Yv1tjrmAU3JiZWCo86ldN:Stack.Storage.User</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">WARNING: Ignoring tagged</span><span class=\"token string\" style=\"color:#e3116c\">'s bounds on template-haskell (&gt;=2.8 &amp;&amp; &lt;2.17); using template-haskell-2.17.0.0.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string\" style=\"color:#e3116c\">Reason: allow-newer enabled.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string\" style=\"color:#e3116c\">WARNING: Ignoring aeson'</span><span class=\"token plain\">s bounds on template-haskell </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token operator\" style=\"color:#393A34\">&gt;=</span><span class=\"token number\" style=\"color:#36acaa\">2.9</span><span class=\"token plain\">.0.0 </span><span class=\"token operator\" style=\"color:#393A34\">&amp;&amp;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">&lt;</span><span class=\"token number\" style=\"color:#36acaa\">2.17</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"> using template-haskell-2.17.0.0.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Reason: allow-newer enabled.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">WARNING: Ignoring th-abstraction</span><span class=\"token string\" style=\"color:#e3116c\">'s bounds on template-haskell (&gt;=2.5 &amp;&amp; &lt;2.17); using template-haskell-2.17.0.0.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string\" style=\"color:#e3116c\">Reason: allow-newer enabled.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string\" style=\"color:#e3116c\">WARNING: Ignoring unliftio-core'</span><span class=\"token plain\">s bounds on base </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token operator\" style=\"color:#393A34\">&gt;=</span><span class=\"token number\" style=\"color:#36acaa\">4.5</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">&amp;&amp;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">&lt;</span><span class=\"token number\" style=\"color:#36acaa\">4.14</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"> using base-4.14.0.0.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Reason: allow-newer enabled.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">WARNING: Ignoring souffle-haskell's bounds on megaparsec </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token operator\" style=\"color:#393A34\">&gt;=</span><span class=\"token number\" style=\"color:#36acaa\">7.0</span><span class=\"token plain\">.5 </span><span class=\"token operator\" style=\"color:#393A34\">&amp;&amp;</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">&lt;</span><span class=\"token number\" style=\"color:#36acaa\">8</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"> using megaparsec-8.0.0.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">stack --stack-root </span><span class=\"token variable\" style=\"color:#36acaa\">`</span><span class=\"token variable builtin class-name\" style=\"color:#36acaa\">pwd</span><span class=\"token variable\" style=\"color:#36acaa\">`</span><span class=\"token plain\">/.stack-root </span><span class=\"token function\" style=\"color:#d73a49\">install</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">. </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># bunch of output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Copied executables to /home/doyougnu/.local/bin:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- dce-fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- ext-stg</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- gen-exe</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- gen-exe2</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- gen-obj</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- gen-obj2</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- mkfullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- show-ghc-stg</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Warning: Installation path /home/doyougnu/.local/bin not found on the </span><span class=\"token environment constant\" style=\"color:#36acaa\">PATH</span><span class=\"token plain\"> environment variable.</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>You can add <code>~/.local/bin</code> to your <code>PATH</code> if you want, I<!-- -->’<!-- -->ll just be directly referencing these binaries as we go.</p><a id=\"org4a2eaf9\"></a><h1>Building the external-stg-interpreter</h1><p>We are almost all done, all that is left is to build the external-stg-interpreter and run a small script that links everything together into a shared object for the interpreter. So:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> external-stg-interpreter/</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ stack </span><span class=\"token function\" style=\"color:#d73a49\">install</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># bunch of output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Copied executables to /home/doyougnu/.local/bin:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- ext-stg</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- ext-stg-interpreter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">- mkfullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Warning: Installation path /home/doyougnu/.local/bin not found on the </span><span class=\"token environment constant\" style=\"color:#36acaa\">PATH</span><span class=\"token plain\"> environment variable.</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Now we have our <code>ext-stg-interpreter</code> built! There are a few caveats I want to point out here. I<!-- -->’<!-- -->ve modified <code>ghc-whole-program-compiler-project/external-stg-interpreter/stack.yaml</code> to load the right packages and use nix:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">cat</span><span class=\"token plain\"> stack.yaml</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">resolver: lts-16.13</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">packages:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - </span><span class=\"token string\" style=\"color:#e3116c\">'.'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - </span><span class=\"token string\" style=\"color:#e3116c\">'external-stg'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">extra-deps:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - souffle-haskell-2.1.0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - primitive-0.7.1.0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  - zip-1.7.0</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">nix:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  enable: </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  packages: </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"> zlib, libffi, pkg-config, </span><span class=\"token function\" style=\"color:#d73a49\">bzip2</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Notice the <code>nix:</code> block. We could have just as easily built this using <code>nix</code> directly or using our <code>shell.nix</code> file.</p><a id=\"org1d34a2e\"></a><h1>Linking the external-stg-interpreter</h1><p>The only task left is to link into a shared object library called\n<code>libHSbase-4.14.0.0.cbits.so</code>. To do that we need to use the script called, <code>c</code>,\nin <code>ghc-whole-program-compiler-project/external-stg-interpreter/data</code>. This\nscript is a bit of a hack, it generates the shared object file so that we can link the symbols requested by the C\nFFI in <code>base</code>, but it populates those functions with our replacements, which do absolutely nothing. For example, we supply a fake garbage collect:</p><div class=\"codeBlockContainer_I0IT language-c theme-code-block\"><div class=\"codeBlockContent_wNvx c\"><pre tabindex=\"0\" class=\"prism-code language-c codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\">// in .../external-stg-interpreter/data/cbits.so-script/c-src/fake_rts.c</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">void</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">performGC</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token keyword\" style=\"color:#00009f\">void</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">void</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">performMajorGC</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token keyword\" style=\"color:#00009f\">void</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>This works because we won't be using the runtime system at all, we'll be using\nthe external STG interpreter instead, however we still need to provide these\nsymbols in order to link. *<strong>*MAJOR NOTE: this file must be next to any\n<!-- -->*<!-- -->.fullpak file you<!-- -->’<!-- -->ll be running the interpreter on**</strong> or else\nyou<!-- -->’<!-- -->ll get an undefined symbol error during linking, for example:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">cbits.so-script  ghc-rts-base.fullpak  minigame-strict.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">### notice no .so file</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ ~/.local/bin/ext-stg-interpreter ghc-rts-base.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ext-stg-interpreter: user error </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">dlopen: ./libHSbase-4.14.0.0.cbits.so: cannot </span><span class=\"token function\" style=\"color:#d73a49\">open</span><span class=\"token plain\"> shared object file: No such </span><span class=\"token function\" style=\"color:#d73a49\">file</span><span class=\"token plain\"> or directory</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## we error'd out because it was missing, also</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## if you get this error then you have an old cbits.so file and need to rerun the c script</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ ~/.local/bin/ext-stg-interpreter ghc-rts-base.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ext-stg-interpreter: user error </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">dlopen: ./libHSbase-4.14.0.0.cbits.so: undefined symbol: getProcessElapsedTime</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>To link the interpreter we need to run <code>c</code> in the <code>data/cbits.so-script</code> sub-folder:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> data/cbits.so-script/</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data/cbits.so-script</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ar  c  cbits-rts.dyn_o  c-src  libHSbase-4.14.0.0.cbits.so  stub-base.dyn_o</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data/cbits.so-script</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ ./c</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">++ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> ar/libHSbase-4.14.0.0-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSbindings-GLFW-3.3.2.0-Jg9TvsfYUZwD0ViIP0H2Tz-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSbytestring-0.10.9.0-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHScriterion-measurement-0.1.2.0-73BCI2Fnk7qE8QjjTa1xNa-ghc8.11.0.20210324.dyn_o_cbits.a ar/libHSghc-8.11.0.20210306-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSGLUT-2.7.0.15-1pzTWDEZBcYHcS36qZ2lpp-ghc8.11.0.20201112.dyn_o_cbits.a ar/libHSGLUT-2.7.0.15-1pzTWDEZBcYHcS36qZ2lpp-ghc8.11.0.20210324.dyn_o_stubs.a ar/libHShashable-1.3.0.0-Kn7aNSFvzgo2qY16wYzuCX-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSinteger-gmp-1.0.3.0-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSlambdacube-quake3-engine-0.1.0.0-7CKLP3Rqgq0PR81lhlwlR-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSmersenne-random-pure64-0.2.2.0-ExYg8DmthtrLG9JevQbt2m-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSOpenGLRaw-3.3.4.0-5vXBlmbOM3AIT7GRYfpE3o-ghc8.11.0.20201112.dyn_o_cbits.a ar/libHSprimitive-0.7.0.1-2k3g9qX0zz16vEv34R307m-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSprocess-1.6.8.2-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHStext-1.2.4.0-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSunix-2.7.2.2-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSunix-2.7.2.2-ghc8.11.0.20210220.dyn_o_stubs.a ar/libHSzlib-0.6.2.1-1I6DmfbLEyTBgDZI7SbZfW-ghc8.11.0.20210306.dyn_o_stubs.a</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">++ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> stub-base.dyn_o/Blank_stub.dyn_o stub-base.dyn_o/ClockGetTime_stub.dyn_o stub-base.dyn_o/Internals_stub.dyn_o stub-base.dyn_o/RUsage_stub.dyn_o</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">++ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> cbits-rts.dyn_o/StgPrimFloat.dyn_o cbits-rts.dyn_o/TTY.dyn_o</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">++ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> c-src/fake_rts.c c-src/hack.c c-src/hschooks.c</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">+ gcc -o libHSbase-4.14.0.0.cbits.so -shared -Wl,--whole-archive ar/libHSbase-4.14.0.0-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSbindings-GLFW-3.3.2.0-Jg9TvsfYUZwD0ViIP0H2Tz-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSbytestring-0.10.9.0-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHScriterion-measurement-0.1.2.0-73BCI2Fnk7qE8QjjTa1xNa-ghc8.11.0.20210324.dyn_o_cbits.a ar/libHSghc-8.11.0.20210306-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSGLUT-2.7.0.15-1pzTWDEZBcYHcS36qZ2lpp-ghc8.11.0.20201112.dyn_o_cbits.a ar/libHSGLUT-2.7.0.15-1pzTWDEZBcYHcS36qZ2lpp-ghc8.11.0.20210324.dyn_o_stubs.a ar/libHShashable-1.3.0.0-Kn7aNSFvzgo2qY16wYzuCX-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSinteger-gmp-1.0.3.0-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSlambdacube-quake3-engine-0.1.0.0-7CKLP3Rqgq0PR81lhlwlR-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSmersenne-random-pure64-0.2.2.0-ExYg8DmthtrLG9JevQbt2m-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSOpenGLRaw-3.3.4.0-5vXBlmbOM3AIT7GRYfpE3o-ghc8.11.0.20201112.dyn_o_cbits.a ar/libHSprimitive-0.7.0.1-2k3g9qX0zz16vEv34R307m-ghc8.11.0.20210306.dyn_o_cbits.a ar/libHSprocess-1.6.8.2-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHStext-1.2.4.0-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSunix-2.7.2.2-ghc8.11.0.20210220.dyn_o_cbits.a ar/libHSunix-2.7.2.2-ghc8.11.0.20210220.dyn_o_stubs.a ar/libHSzlib-0.6.2.1-1I6DmfbLEyTBgDZI7SbZfW-ghc8.11.0.20210306.dyn_o_stubs.a -Wl,--no-whole-archive stub-base.dyn_o/Blank_stub.dyn_o stub-base.dyn_o/ClockGetTime_stub.dyn_o stub-base.dyn_o/Internals_stub.dyn_o stub-base.dyn_o/RUsage_stub.dyn_o cbits-rts.dyn_o/StgPrimFloat.dyn_o cbits-rts.dyn_o/TTY.dyn_o -fPIC c-src/fake_rts.c c-src/hack.c c-src/hschooks.c -lm -lgmp -ltinfo -lGL -lX11 -lXi -lXrandr -lXxf86vm -lXcursor -lXinerama -lpthread</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>This will produce <code>libHSbase-4.14.0.0.cbits.so</code> in the immediate directory:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data/cbits.so-script</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> -l</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">total </span><span class=\"token number\" style=\"color:#36acaa\">984</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">drwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">2</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">4096</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 ar</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">300</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 c</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">drwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">2</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">4096</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 cbits-rts.dyn_o</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">drwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">2</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">4096</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 c-src</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">986008</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:50 libHSbase-4.14.0.0.cbits.so    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## &lt;----- new</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">drwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">2</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">   </span><span class=\"token number\" style=\"color:#36acaa\">4096</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 stub-base.dyn_o</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Now we can test our interpreter by running it on the <code>*.fullpak</code> files in <code>external-stg-interpreter/data</code>:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data/cbits.so-script</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">cbits.so-script  ghc-rts-base-call-graph-summary  ghc-rts-base-call-graph.tsv  ghc-rts-base.fullpak  libHSbase-4.14.0.0.cbits.so  minigame-strict.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## remove the old .so file</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">rm</span><span class=\"token plain\"> libHSbase-4.14.0.0.cbits.so</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## soft-link to the one we just built</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ln</span><span class=\"token plain\"> -s cbits.so-script/libHSbase-4.14.0.0.cbits.so libHSbase-4.14.0.0.cbits.so</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> -l</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">total </span><span class=\"token number\" style=\"color:#36acaa\">79220</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">drwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">6</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">     </span><span class=\"token number\" style=\"color:#36acaa\">4096</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:50 cbits.so-script</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">       </span><span class=\"token number\" style=\"color:#36acaa\">48</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:47 ghc-rts-base-call-graph-summary</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">28238</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:47 ghc-rts-base-call-graph.tsv</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22450708</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 ghc-rts-base.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">lrwxrwxrwx </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">       </span><span class=\"token number\" style=\"color:#36acaa\">43</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:55 libHSbase-4.14.0.0.cbits.so -</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> cbits.so-script/libHSbase-4.14.0.0.cbits.so  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">### &lt;---- new</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">58630129</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 minigame-strict.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ ~/.local/bin/ext-stg-interpreter ghc-rts-base.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">hello</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">hello</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ssHeapStartAddress: </span><span class=\"token number\" style=\"color:#36acaa\">53522</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ssTotalLNECount: </span><span class=\"token number\" style=\"color:#36acaa\">69</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ssClosureCallCounter: </span><span class=\"token number\" style=\"color:#36acaa\">360</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">executed closure </span><span class=\"token function\" style=\"color:#d73a49\">id</span><span class=\"token plain\"> count: </span><span class=\"token number\" style=\"color:#36acaa\">114</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">call graph size: </span><span class=\"token number\" style=\"color:#36acaa\">150</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">./external-stg-interpreter/data</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> -l</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">total </span><span class=\"token number\" style=\"color:#36acaa\">79220</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">drwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">6</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">     </span><span class=\"token number\" style=\"color:#36acaa\">4096</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:50 cbits.so-script</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">       </span><span class=\"token number\" style=\"color:#36acaa\">48</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:56 ghc-rts-base-call-graph-summary    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">### &lt;---- interpreter output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">28238</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:56 ghc-rts-base-call-graph.tsv        </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">### &lt;---- interpreter output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22450708</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 ghc-rts-base.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">lrwxrwxrwx </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">       </span><span class=\"token number\" style=\"color:#36acaa\">43</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">:55 libHSbase-4.14.0.0.cbits.so -</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> cbits.so-script/libHSbase-4.14.0.0.cbits.so</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">58630129</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">27</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14</span><span class=\"token plain\">:10 minigame-strict.fullpak</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>And it works, we have two new files, <code>&lt;foo&gt;-call-graph-summary</code> and <code>&lt;foo&gt;-call-graph.tsv</code> which we can analyze to inspect the behavior of our program (more on this later).</p><a id=\"org2daa4b8\"></a><h1>The whole setup process on a demo</h1><p>That was a rather involved example, to make clear the dependencies and steps required to run this on your own code the rest of this tutorial will run the interpreter on two of Csaba<!-- -->’<!-- -->s demo<!-- -->’<!-- -->s from his skillshare talk. First let<!-- -->’<!-- -->s grab the code:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">pwd</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">/home/doyougnu/programming/haskell</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">git</span><span class=\"token plain\"> clone https://github.com/grin-compiler/ext-stg-interpreter-presentation-demos.git</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ext-stg-interpreter-presentation-demos ghc-whole-program-compiler-project </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Now we<!-- -->’<!-- -->ll run the first demo which is a simply fold over a list:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ nix-shell ghc-whole-program-compiler-project/shell.nix</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">trace: checking </span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> /home/doyougnu/programming/haskell/hadrian/hadrian.cabal is present:  no</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Recommended ./configure arguments </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">found </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> </span><span class=\"token variable\" style=\"color:#36acaa\">$CONFIGURE_ARGS</span><span class=\"token builtin class-name\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">or use the configure_ghc </span><span class=\"token builtin class-name\">command</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-gmp-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/sznfxigwvrvn6ar3nz3f0652zsld9xqj-gmp-6.2.0-dev/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-gmp-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/447im4mh8gmw85dkrvz3facg1jsbn6c7-gmp-6.2.0/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-curses-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/84g84bg47xxg01ba3nv0h418v5v3969n-ncurses-6.1-20190112-dev/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-curses-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/xhhkr936b9q5sz88jp4l29wljbbcg39k-ncurses-6.1-20190112/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libnuma-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/bfrcskjspk9a179xqqf1q9xqafq5s8d2-numactl-2.0.13/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libnuma-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/bfrcskjspk9a179xqqf1q9xqafq5s8d2-numactl-2.0.13/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libdw-includes</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/sv6f05ngaarba50ybr6fdfc7cciv6nbv-elfutils-0.176/include</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --with-libdw-libraries</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">/nix/store/sv6f05ngaarba50ybr6fdfc7cciv6nbv-elfutils-0.176/lib</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  --enable-dwarf-unwind</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:~/programming/haskell</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> ext-stg-interpreter-presentation-demos/demo-01-tsumupto/</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">nix-shell:~/programming/haskell/ext-stg-interpreter-presentation-demos/demo-01-tsumupto</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">$ </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/ghc-whole-program-compiler-project/ghc-wpc/_build/stage1/bin/ghc -O2 tsumupto.hs</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> of </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> Compiling Main             </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"> tsumupto.hs, tsumupto.o </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">Linking tsumupto </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token builtin class-name\">cd</span><span class=\"token plain\"> ext-stg-interpreter-presentation-demos/demo-01-tsumupto</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">tsumupto  tsumupto.hi  tsumupto.hs  tsumupto.o  tsumupto.o_ghc_stgapp  tsumupto.o_modpak</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Note, that we have two new files: <code>*.o_ghc_stgapp</code> and <code>.o_modpak</code> as a result of building with <code>ghc-wpc</code>. If you try to run this from outside the nix-shell you<!-- -->’<!-- -->ll get an error about missing <code>mkmodpak</code>:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/ghc-whole-program-compiler-project/ghc-wpc/_build/stage1/bin/ghc -O2 tsumupto.hs</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> of </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> Compiling Main             </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"> tsumupto.hs, tsumupto.o </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ghc: could not execute: mkmodpak</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Now that we have those files we can run the interpreter, but first though we need to make a <code>*.fullpak</code> file from the <code>*.o_ghc_stgapp</code> file and create a symbolic link to <code>libHSbase-4.14.0.0.cbits.so</code>:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## make the fullpack file</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ ~/.local/bin/mkfullpak tsumupto.o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">all modules: </span><span class=\"token number\" style=\"color:#36acaa\">259</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">app modules: </span><span class=\"token number\" style=\"color:#36acaa\">113</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">app dependencies:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">. </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># bunch of output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">main                                                         Main</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">creating tsumupto.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## create the link to the shared object file</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ln</span><span class=\"token plain\"> -s </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/ghc-whole-program-compiler-project/external-stg-interpreter/data/cbits.so-script/libHSbase-4.14.0.0.cbits.so libHSbase-4.14.0.0.cbits.so</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">## the final directory should look like this</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">libHSbase-4.14.0.0.cbits.so  tsumupto  tsumupto.fullpak  tsumupto.hi  tsumupto.hs  tsumupto.o  tsumupto.o_ghc_stgapp  tsumupto.o_modpak</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>And now we can run the interpreter:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ ~/.local/bin/ext-stg-interpreter tsumupto.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token number\" style=\"color:#36acaa\">50005000</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ssHeapStartAddress: </span><span class=\"token number\" style=\"color:#36acaa\">44082</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ssTotalLNECount: </span><span class=\"token number\" style=\"color:#36acaa\">43</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">ssClosureCallCounter: </span><span class=\"token number\" style=\"color:#36acaa\">30275</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">executed closure </span><span class=\"token function\" style=\"color:#d73a49\">id</span><span class=\"token plain\"> count: </span><span class=\"token number\" style=\"color:#36acaa\">112</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">call graph size: </span><span class=\"token number\" style=\"color:#36acaa\">146</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>The first line is the output of the program and the rest are diagnostics that the interpreter outputs. More importantly we should have a tab-separated csv file and call graph file in our local directory after running the interpreter:</p><div class=\"codeBlockContainer_I0IT language-bash theme-code-block\"><div class=\"codeBlockContent_wNvx bash\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">$ </span><span class=\"token function\" style=\"color:#d73a49\">ls</span><span class=\"token plain\"> -l</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">total </span><span class=\"token number\" style=\"color:#36acaa\">23876</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">lrwxrwxrwx </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">      </span><span class=\"token number\" style=\"color:#36acaa\">114</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:21 libHSbase-4.14.0.0.cbits.so -</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/</span><span class=\"token punctuation\" style=\"color:#393A34\">..</span><span class=\"token plain\">/ghc-whole-program-compiler-project/external-stg-interpreter/data/cbits.so-script/libHSbase-4.14.0.0.cbits.so</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rwxr-xr-x </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">  </span><span class=\"token number\" style=\"color:#36acaa\">9442648</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:12 tsumupto</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">       </span><span class=\"token number\" style=\"color:#36acaa\">53</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:23 tsumupto-call-graph-summary   </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">### &lt;---- interpreter output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">    </span><span class=\"token number\" style=\"color:#36acaa\">27490</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:23 tsumupto-call-graph.tsv       </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">### &lt;---- interpreter output</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw------- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">14922366</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:19 tsumupto.fullpak</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">     </span><span class=\"token number\" style=\"color:#36acaa\">1769</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:12 tsumupto.hi</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">      </span><span class=\"token number\" style=\"color:#36acaa\">207</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">28</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">22</span><span class=\"token plain\">:56 tsumupto.hs</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">     </span><span class=\"token number\" style=\"color:#36acaa\">4488</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:12 tsumupto.o</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw-r--r-- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">     </span><span class=\"token number\" style=\"color:#36acaa\">8817</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:12 tsumupto.o_ghc_stgapp</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-rw------- </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"> doyougnu </span><span class=\"token function\" style=\"color:#d73a49\">users</span><span class=\"token plain\">     </span><span class=\"token number\" style=\"color:#36acaa\">9803</span><span class=\"token plain\"> Apr </span><span class=\"token number\" style=\"color:#36acaa\">30</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">12</span><span class=\"token plain\">:12 tsumupto.o_modpak</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Which can be loaded into <code>gephi</code> for closer inspection of the call graph of our program. Be sure to watch the rest of the demo in Csaba<!-- -->’<!-- -->s talk for this part! For now we<!-- -->’<!-- -->ll be going over using <code>gephi</code> and these files in our next blog post in this series, stay tuned!</p><a id=\"org8193a1a\"></a><h1>Summary</h1><a id=\"org940ba90\"></a><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"file-descriptions\">File Descriptions<a class=\"hash-link\" href=\"#file-descriptions\" title=\"Direct link to heading\">​</a></h2><ul><li><code>foo.modpak</code>: A zip file which contains the Core, STG, CMM, source code, and assembly for the module <code>foo</code></li><li><code>foo.fullpak</code>: A zip file which contains the same information as <code>modpack</code> but for every module of the program rather than just module <code>foo</code>.</li><li><code>foo.o_ghc_stgapp</code>: a yaml like file that contains:<ul><li>the module<!-- -->’<!-- -->s dependencies including package dependencies</li><li>a bunch of file paths for shared objects of the libraries</li><li>the flags the module was built with</li></ul></li><li><code>libHSbase-4.14.0.0.cbits.so</code>: shared object file created by <code>ext-stg-interpreter/data/cbits.so-script.c</code>. Required to be in the same directory as <code>ext-stg-interpreter</code> will be invoked.</li></ul><a id=\"org8e9f409\"></a><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"step-by-step-guide-for-running-the-interpreter-on-your-code\">Step-by-Step guide for running the interpreter on your code<a class=\"hash-link\" href=\"#step-by-step-guide-for-running-the-interpreter-on-your-code\" title=\"Direct link to heading\">​</a></h2><ol><li>Build your project with <code>ghc-wpc/_build/stage1/bin</code> by directly invoking that <code>ghc</code> (as I did in the demo-01 project) or by pointing stack to it with <code>system-ghc</code> and <code>extra-path</code> in <code>stack.yaml</code>, or by passing <code>-w &lt;path-to-ghc-wpc-binary</code> with cabal.</li><li>Generate the <code>foo.fullpak</code> file with <code>mkfullpak foo.o_ghc_stgapp</code></li><li>Soft-link to <code>libHSbase-4.14.0.0.cbits.so</code> in the directory you will run the interpreter in. This file must be present when you run the interpreter!</li><li>Now run the interpreter on <code>project.fullpak</code></li><li>Analyze <code>foo-call-graph-summary</code> and <code>foo-call-graph.tsv</code> with whatever tools make sense to you</li></ol><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"footnotes\">Footnotes<a class=\"hash-link\" href=\"#footnotes\" title=\"Direct link to heading\">​</a></h2><div class=\"footnotes\"><hr><ol><li id=\"fn-1\">This isn<!-- -->’<!-- -->t completely true, there is the <code>RuntimeRep</code> type controls\nexactly this and the levity polymorphism work by <a href=\"https://richarde.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Richard\nEisenberg</a>. See <a href=\"https://www.youtube.com/watch?v=Mb_B-j8ePfc\" target=\"_blank\" rel=\"noopener noreferrer\">this\nvideo</a> for examples on using these\nfeatures. We do plan to include a more thorough and real world example on using\nlevity polymorphism for better performance in the <a href=\"https://github.com/haskellfoundation/tech-proposals/pull/26\" target=\"_blank\" rel=\"noopener noreferrer\">haskell optimization\nhandbook</a>.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li></ol></div>",
            "url": "https://engineering.iog.io/2022-05-02-setup-ext-stg-interp",
            "title": "Setting up Csaba's External STG Interpreter",
            "summary": "Table of Contents",
            "date_modified": "2022-05-02T00:00:00.000Z",
            "author": {
                "name": "Jeffrey M. Young",
                "url": "https://iog.io/en/"
            },
            "tags": [
                "ghc",
                "stg",
                "tooling",
                "profiling",
                "optimization"
            ]
        },
        {
            "id": "2022-04-28-on-the-inlining-of-integer-and-natural-operations",
            "content_html": "<p>In this post I discuss the inlining of Integer and Natural operations in Haskell. It’s a promising performance work I’ve been conducting six months ago, which was blocked by an independent issue, but that I will likely resume soon as the issue has been fixed in the meantime.</p><hr><p>To follow this post, you must know that <code>Natural</code> numbers are represented as follows in <code>ghc-bignum</code>:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-- | Natural number</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">--</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-- Invariant: numbers &lt;= WORD_MAXBOUND use the `NS` constructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">data Natural</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   = NS !Word#</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   | NB !BigNat#</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Small naturals are represented with a <code>Word#</code> and large ones with a <code>BigNat#</code> (a <code>ByteArray#</code>).</p><p>Now consider the following simple example using Natural:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-- | Add 2 to a Word. Use Natural to avoid Word overflow</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">foo :: Word -&gt; Natural</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">foo x = fromIntegral x + 2</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>There are only small naturals involved: <code>fromIntegral x</code> is small because <code>x</code> is a <code>Word</code>, and <code>2</code> is small. We could hope that GHC would use <code>Word#</code> primops to implement this and would allocate a <code>Natural</code> heap object for the result <em>only</em>. However it’s not what happens currently, even in GHC HEAD. In the following STG dump, we can see that a <code>Natural</code> heap object is allocated for <code>x</code> before calling <code>naturalAdd</code> (<code>let</code> bindings in STG reflect heap allocations):</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">foo1 = NS! [2##];</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">foo =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    \\r [x_sXn]</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        case x_sXn of {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        W# x#_sXp -&gt;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        let { sat_sXq = NS! [x#_sXp]; } in  naturalAdd sat_sXq foo1;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        };</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Let’s look at <code>naturalAdd</code>:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">-- | Add two naturals</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">naturalAdd :: Natural -&gt; Natural -&gt; Natural</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">{-# NOINLINE naturalAdd #-}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">naturalAdd (NS x) (NB y) = NB (bigNatAddWord# y x)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">naturalAdd (NB x) (NS y) = NB (bigNatAddWord# x y)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">naturalAdd (NB x) (NB y) = NB (bigNatAdd x y)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">naturalAdd (NS x) (NS y) =</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   case addWordC# x y of</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      (# l,0# #) -&gt; NS l</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      (# l,c  #) -&gt; NB (bigNatFromWord2# (int2Word# c) l)</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>We are clearly in the last case where both arguments are small. It seems beneficial to allow this function to be inlined. If we did we would get:</p><div class=\"codeBlockContainer_I0IT language-javascript theme-code-block\"><div class=\"codeBlockContent_wNvx javascript\"><pre tabindex=\"0\" class=\"prism-code language-javascript codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">foo </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    \\r </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">x_s158</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">case</span><span class=\"token plain\"> x_s158 </span><span class=\"token keyword\" style=\"color:#00009f\">of</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token constant\" style=\"color:#36acaa\">W</span><span class=\"token plain\"># x#_s15a </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">case</span><span class=\"token plain\"> addWordC# </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">x#_s15a </span><span class=\"token number\" style=\"color:#36acaa\">2</span><span class=\"token plain\">##</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">of</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">#</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">#</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> l_s15c ds_s15d </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">case</span><span class=\"token plain\"> ds_s15d</span><span class=\"token operator\" style=\"color:#393A34\">&lt;</span><span class=\"token maybe-class-name\">TagProper</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">of</span><span class=\"token plain\"> ds1_s15e </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          __DEFAULT </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              </span><span class=\"token keyword\" style=\"color:#00009f\">case</span><span class=\"token plain\"> int2Word# </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">ds1_s15e</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">of</span><span class=\"token plain\"> sat_s15f </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              __DEFAULT </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              </span><span class=\"token keyword\" style=\"color:#00009f\">case</span><span class=\"token plain\"> bigNatFromWord2# sat_s15f l_s15c </span><span class=\"token keyword\" style=\"color:#00009f\">of</span><span class=\"token plain\"> ds2_s15g </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              __DEFAULT </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token constant\" style=\"color:#36acaa\">NB</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">ds2_s15g</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token plain\"># </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token constant\" style=\"color:#36acaa\">NS</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">l_s15c</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>which produces much better assembly code, especially if there is no carry:</p><div class=\"codeBlockContainer_I0IT theme-code-block\"><div class=\"codeBlockContent_wNvx\"><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    addq $2,%rax       ; add 2 to a machine word</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    setc %bl           ; test the carry.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    movzbl %bl,%ebx    ; it could be done</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    testq %rbx,%rbx    ; more efficiently</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    jne _blk_c17c      ; with \"jc\"</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">_blk_c17i:</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    movq $NS_con_info,-8(%r12) ; alloc NS datacon value</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    movq %rax,(%r12)           ; with the addition result as payload.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    leaq -7(%r12),%rbx         ; make it the first argument</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    addq $8,%rbp               ; and then</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    jmp *(%rbp)                ; call continuation</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">...</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>So why aren’t we always inlining <code>naturalAdd</code>? We even explicitly disallow it with a <code>NOINLINE</code> pragma. The reason is that <code>naturalAdd</code> and friends are involved in constant-folding rules.</p><p>For example, consider:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">bar :: Natural -&gt; Natural</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">bar x = x + 2</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">baz = bar 0x12345678913245678912345679123456798</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>Currently we get the following Core:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">bar1 = NS 2##</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">bar = \\ x_aHU -&gt; naturalAdd x_aHU bar1</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">baz = NB 99114423092485377935703335253042771879834</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p>You can see that <code>baz</code>  is a constant thanks to constant-folding.</p><p>However if we let <code>naturalAdd</code> inline we get:</p><div class=\"codeBlockContainer_I0IT language-haskell theme-code-block\"><div class=\"codeBlockContent_wNvx haskell\"><pre tabindex=\"0\" class=\"prism-code language-haskell codeBlock_jd64 thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_mRuA\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">baz</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  = case bigNatAddWord# 99114423092485377935703335253042771879832 2##</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    of ds_d11H</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    { __DEFAULT -&gt;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    NB ds_d11H</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><button type=\"button\" aria-label=\"Copy code to clipboard\" class=\"copyButton_wuS7 clean-btn\">Copy</button></div></div><p><code>baz</code> is no longer a constant.</p><p>A solution would be to add constant-folding rules for <code>BigNat#</code> functions, such as <code>bigNatAddWord#</code>. This is exactly what we have started doing in <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20361\" target=\"_blank\" rel=\"noopener noreferrer\">#20361</a>. Our new plan is:</p><ul><li>Make <code>BigNat#</code> operation <code>NOINLINE</code> and add constant-folding rules for them</li><li>Make Integer/Natural operations <code>INLINEABLE</code> (expose their unfolding)</li><li>Hence rely on constant-folding for <code>Word#/Int#/BigNat#</code> to provide constant folding for <code>Integer</code> and <code>Natural</code></li></ul><p>The good consequences of this plan are:</p><ul><li>Less allocations when bignum operations are inlined and some of the arguments are known to be small/big or fully known (constant).</li><li><code>Integer</code> and <code>Natural</code> are less magical: you can implement your own similar types and expect the same performance without having to add new rewrite rules</li></ul><p>There were some unforeseen difficulties with this plan though:</p><ol><li>Some of the rewrite rules we need involve unboxed values such as <code>BigNat#</code> and <code>Word#</code> and the weren’t supported. Luckily, this has been recently fixed (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19313\" target=\"_blank\" rel=\"noopener noreferrer\">#19313</a>) by removing the “app invariant” (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20554\" target=\"_blank\" rel=\"noopener noreferrer\">#20554</a>). Thanks Joachim! That’s the reason why we could resume this work now.</li><li>Some unfoldings (RHSs) become bigger due to the inlining of bignum operations. Hence they may not themselves be inlined further due to inlining thresholds even if it would be beneficial. A better inlining heuristic would fix this (see <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20516\" target=\"_blank\" rel=\"noopener noreferrer\">#20516</a>). It will likely be the topic of the next post.</li></ol>",
            "url": "https://engineering.iog.io/2022-04-28-on-the-inlining-of-integer-and-natural-operations",
            "title": "On the inlining of Integer and Natural operations",
            "summary": "In this post I discuss the inlining of Integer and Natural operations in Haskell. It’s a promising performance work I’ve been conducting six months ago, which was blocked by an independent issue, but that I will likely resume soon as the issue has been fixed in the meantime.",
            "date_modified": "2022-04-28T00:00:00.000Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "2022-04-19-ghc-march-2022-update",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"js-backend\">JS Backend<a class=\"hash-link\" href=\"#js-backend\" title=\"Direct link to heading\">​</a></h2><p>In March the team focused on porting more GHCJS code to GHC head.</p><ul><li>Most of us are new to GHCJS’s codebase so we are taking some time to better understand it and to better document it as code gets integrated into GHC head.</li><li>Development process: initially we had planned to integrate features one after the others into GHC head. However it was finally decided that features would be merged into a <a href=\"https://gitlab.haskell.org/ghc/ghc/-/commits/wip/javascript-backend\" target=\"_blank\" rel=\"noopener noreferrer\">wip/javascript-backend</a> branch first and then later merged into GHC head. After trying this approach we decided to work directly into another branch: <a href=\"https://gitlab.haskell.org/ghc/ghc/-/commits/wip/js-staging\" target=\"_blank\" rel=\"noopener noreferrer\">wip/js-staging</a> . Opening merge requests that can’t be tested against a branch that isn’t GHC head didn’t bring any benefit and slowed us too much.</li><li>Documentation: we wrote a document comparing the different approaches to target JavaScript/WebAssembly <a href=\"https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript\" target=\"_blank\" rel=\"noopener noreferrer\"> https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript</a></li><li>RTS: some parts of GHCJS’s RTS are generated from Haskell code, similarly to code generated with the genapply program in the C RTS. This code has been ported to GHC head. As JS linking---especially linking with the RTS---will only be performed by GHC in the short term, we plan to make it generate this code dynamically at link time.</li><li>Linker: most of GHCJS’s linker code has been adapted to GHC head. Because of the lack of modularity of GHC, a lot of GHC code was duplicated into GHCJS and slightly modified. Now that both codes have diverged we need to spend some time making them converge again, probably by making the Linker code in GHC more modular.</li><li>Adaptation to GHC head: some work is underway to replace GHCJS’s Objectable type-class with GHC’s Binary type-class which serves the same purpose. Similarly a lot of uses of Text have been replaced with GHC’s ShortText or FastString.</li><li>Template Haskell: GHCJS has its own TH runner which inspired GHC’s external interpreter (“Iserv”) programs. We have been exploring options to port TH runner code as an Iserv implementation. The Iserv protocol uses GADTs to represent its messages which requires more boilerplate code to convert them into JS because we can’t automatically derive aeson instances for them.</li><li>Plugins: we have an MR adding support for “external static plugins” to GHC <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377\" target=\"_blank\" rel=\"noopener noreferrer\">!7377</a>. Currently it only supports configuring plugins <em>via</em> environment variables. We have been working on adding support for command-line flags instead.</li><li>Testsuite: we have fixed GHC’s build system so that it can run GHC’s testsuite when GHC is built as a cross-compiler (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7850\" target=\"_blank\" rel=\"noopener noreferrer\">!7850</a>). There is still some work to do (tracked in <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/21292\" target=\"_blank\" rel=\"noopener noreferrer\">#21292</a>) to somehow support tests that <em>run</em> compiled programs: with cross-compilers, target programs can’t be directly executed by the host architecture.</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"misc\">Misc<a class=\"hash-link\" href=\"#misc\" title=\"Direct link to heading\">​</a></h2><ul><li><a href=\"https://github.com/haskellfoundation/tech-proposals/pull/26\" target=\"_blank\" rel=\"noopener noreferrer\">Performance book</a>: some time was spent on the infrastructure (CI) and on switching the format of the book to ReStructured Text</li><li>Modularity: some time was spent discussing GHC’s design and refactoring (c.f. <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7442\" target=\"_blank\" rel=\"noopener noreferrer\">!7442</a> and <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20927\" target=\"_blank\" rel=\"noopener noreferrer\">#20927</a>).</li></ul>",
            "url": "https://engineering.iog.io/2022-04-19-ghc-march-2022-update",
            "title": "GHC March 2022 Update",
            "summary": "JS Backend",
            "date_modified": "2022-04-19T00:00:00.000Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "2022-04-08-haskell-nix-march-update",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"changes\">Changes<a class=\"hash-link\" href=\"#changes\" title=\"Direct link to heading\">​</a></h2><ul><li>To cross compile Haskell code for windows a <code>wine</code> process must be used to evaluate Template Haskell code at compile time.  Some times this code needs DLLs to be present for the Template Haskell code to run.  We had been maintaining a list of DLLs manually (<a href=\"https://github.com/input-output-hk/haskell.nix/pull/1400\" target=\"_blank\" rel=\"noopener noreferrer\">#1400</a> for instance added <code>secp256k1</code>).  A more general solution (<a href=\"https://github.com/input-output-hk/haskell.nix/pull/1405\" target=\"_blank\" rel=\"noopener noreferrer\">#1405</a>) was found that uses the <code>pkgsHostTarget</code> environment variable to obtain a list of all the packages dependencies.  Then the DLLs from the are made available to the <code>wine</code> process running the Template Haskell code.  This should make more libraries build correctly while reducing unnecessary dependencies.</li><li>The way Haskell.nix cleans source trees has changed with <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1403\" target=\"_blank\" rel=\"noopener noreferrer\">#1403</a>, <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1409\" target=\"_blank\" rel=\"noopener noreferrer\">#1409</a> and <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1418\" target=\"_blank\" rel=\"noopener noreferrer\">#1418</a>.  When using Nix <code>&gt;=2.4</code> source in the store is now filtered in the same way it is locally.  This has a couple of key advantages:<ul><li>It makes it less likely that results on CI systems (where the source is likely to be in the store) will differ from results for local builds (where the source is in a cloned git repository).</li><li>Potential for reducing load on CI.  Although more work may be needed, this kind of filtering combined with the experimental content addressing features of Nix reduce the required rebuilds.</li></ul></li><li>In the past rather cryptic error messages were given when an attempt was made to use an old version of GHC on a platform Haskell.nix did not support it.  In some cases Haskell.nix would even attempt to build GHC and only fail after some time.  Better error messages are now given right away when an attempt is made to use a GHC version that is not supported for a particular platform <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1411\" target=\"_blank\" rel=\"noopener noreferrer\">#1411</a></li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"version-updates\">Version Updates<a class=\"hash-link\" href=\"#version-updates\" title=\"Direct link to heading\">​</a></h2><ul><li>GHC 9.2.2 was added <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1394\" target=\"_blank\" rel=\"noopener noreferrer\">#1394</a></li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"bug-fixes\">Bug fixes<a class=\"hash-link\" href=\"#bug-fixes\" title=\"Direct link to heading\">​</a></h2><ul><li><code>gitMinimal</code> replaces <code>git</code> to reduce the dependency tree of <code>cabalProject</code> functions <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1387\" target=\"_blank\" rel=\"noopener noreferrer\">#1387</a></li><li>Less used of <code>allowSubstitutes=false</code> <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1389\" target=\"_blank\" rel=\"noopener noreferrer\">#1389</a></li><li>Fixed <code>aarch64-linux</code> builds by using correct boot compiler <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1390\" target=\"_blank\" rel=\"noopener noreferrer\">#1390</a></li><li><code>icu-i18n</code> package mapping added to make <code>text-icu</code> build <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1395\" target=\"_blank\" rel=\"noopener noreferrer\">#1395</a></li><li>Fixes needed for newer <code>nixpkgs</code> versions<ul><li>Use list for <code>configureFlags</code> <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1396\" target=\"_blank\" rel=\"noopener noreferrer\">#1396</a></li><li>The spdx json file is in a <code>.json</code> output <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1397\" target=\"_blank\" rel=\"noopener noreferrer\">#1397</a></li><li><code>gdk_pixbuf</code> is now <code>gdk-pixbuf</code> <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1398\" target=\"_blank\" rel=\"noopener noreferrer\">#1398</a></li></ul></li><li>Replaced deprecated NixOS binary cache settings in docs <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1410\" target=\"_blank\" rel=\"noopener noreferrer\">#1410</a></li><li>Enable static build of <code>secp256k1</code> on musl <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1413\" target=\"_blank\" rel=\"noopener noreferrer\">#1413</a></li></ul><p>Finally, we’d like to thank all the awesome contributors, who make&nbsp;<code>haskell.nix</code>&nbsp;a thriving open source project!&nbsp;❤️</p>",
            "url": "https://engineering.iog.io/2022-04-08-haskell-nix-march-update",
            "title": "haskell.nix March Update",
            "summary": "Changes",
            "date_modified": "2022-04-08T00:00:00.000Z",
            "tags": [
                "nix"
            ]
        },
        {
            "id": "2022-03-09-ghc-february-2022-update",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"js-backend\">JS backend<a class=\"hash-link\" href=\"#js-backend\" title=\"Direct link to heading\">​</a></h2><p>This month we worked on adapting code from GHCJS to merge into GHC head. We also started discussing the implementation process publicly and especially with our colleagues at Well-Typed.</p><ul><li>Ticket about adapting GHCJS’ code into a proper JS backend for GHC has been opened <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/21078\" target=\"_blank\" rel=\"noopener noreferrer\">#21078</a>]<!-- -->. Feedback was very positive!</li><li>There were discussions about the process and an agreement to target GHC 9.6 release <!-- -->[<a href=\"https://mail.haskell.org/pipermail/ghc-devs/2022-February/020580.html\" target=\"_blank\" rel=\"noopener noreferrer\">email on ghc-devs</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/wikis/javascript-backend\" target=\"_blank\" rel=\"noopener noreferrer\">wiki page</a>]</li><li><code>deriveConstants</code> is a program used to generate some header file included in the rts package. While it is mainly useful for native targets, we had to make it support Javascript targets <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7585\" target=\"_blank\" rel=\"noopener noreferrer\">!7585</a>]</li><li>Javascript is going to be the first official target platform supported by GHC that has its own notion of managed heap objects. Hence we may need a new <code>RuntimeRep</code> to represent these values for Haskell codes interacting with JS codes via FFI. We opened <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7577\" target=\"_blank\" rel=\"noopener noreferrer\">!7577</a> into which we tried to make this new <code>RuntimeRep</code> non JS specific so that it could be reused for future backends targeting other managed platforms (e.g. CLR, JVM). It triggered a lot of discussions summarized in <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/21142\" target=\"_blank\" rel=\"noopener noreferrer\">#21142</a>.</li><li>GHCJS’s code generator was ported to GHC head <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7573\" target=\"_blank\" rel=\"noopener noreferrer\">!7573</a>]<!-- -->. In its current state, we can generate Javascript unoptimised code -- the optimiser hasn’t been ported yet -- by compiling a module with <code>-c -fjavascript</code>. It required many changes, not only to adapt to changes between GHC 8.10 and GHC head but also to avoid adding new package dependencies. It was also an opportunity to refactor and to document the code, which is still a work in progress.</li><li>GHC doesn’t use any lens library, hence to port the code generator we had to replace lenses with usual record accessors. It turned out that <code>case</code> alternatives in STG lacked them because they were represented with a triple. We took the opportunity to introduce a proper record type for them  <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7652\" target=\"_blank\" rel=\"noopener noreferrer\">!7652</a></li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"plutus-apps-js-demo\">Plutus-apps JS demo<a class=\"hash-link\" href=\"#plutus-apps-js-demo\" title=\"Direct link to heading\">​</a></h2><ul><li>We improved the proof of concept JavaScript library for generating Plutus transactions with a given set of constraints and lookups, exposing functionality from the <code>plutus-ledger-constraints</code> package. <!-- -->[<a href=\"https://github.com/hamishmack/plutus-apps/blob/1f331225853f502807aab370f82ec975bdec38ee/plutus-pab/mktx/README.md\" target=\"_blank\" rel=\"noopener noreferrer\">Report</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"reporting\">Reporting<a class=\"hash-link\" href=\"#reporting\" title=\"Direct link to heading\">​</a></h2><ul><li>we wrote a blog post about the work we have done in 2021 as it wasn’t covered anywhere else: <a href=\"https://engineering.iog.io/2022-03-01-2021-ghc-update\" target=\"_blank\" rel=\"noopener noreferrer\">https://engineering.iog.io/2022-03-01-2021-ghc-update</a></li></ul>",
            "url": "https://engineering.iog.io/2022-03-09-ghc-february-2022-update",
            "title": "GHC February 2022 Update",
            "summary": "JS backend",
            "date_modified": "2022-03-09T00:00:00.000Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "2022-03-01-2021-ghc-update",
            "content_html": "<p>IOG is committed to improving Haskell developer experience, both by <a href=\"https://iohk.io/en/blog/posts/2020/11/04/iohk-sponsors-new-haskell-foundation\" target=\"_blank\" rel=\"noopener noreferrer\">sponsoring the Haskell Foundation</a> and by directly founding a team committed to this task: the Haskell DX team.</p><p>The team now tries to provide regular (monthly) updates about its work. This post is a bit longer because it covers all of 2021 which has not been covered anywhere else.</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"code-generation\">Code generation<a class=\"hash-link\" href=\"#code-generation\" title=\"Direct link to heading\">​</a></h2><ul><li>Added a new backend for AArch64 architectures, especially to support Apple’s M1. Previously AArch64 was only supported via the LLVM based backend which is much slower. <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5884\" target=\"_blank\" rel=\"noopener noreferrer\">!5884</a>]</li><li>Added support for Apple’s M1 calling convention. In GHC 9.2.1 it implied making lifted sized types (e.g. <code>Word8</code>, <code>Int16</code>...) use their unlifted counterparts (e.g. <code>Word8#</code>, <code>Int16#</code>...); in GHC 8.10.7 – a minor release –&nbsp; a less invasive but more fragile solution was implemented <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/commit/c49250d88915db6acf88d2574db827cc2c4fa080\" target=\"_blank\" rel=\"noopener noreferrer\">commit</a>]<!-- -->.</li><li>Fixed a very old GHC issue <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/1257\" target=\"_blank\" rel=\"noopener noreferrer\">#1257</a>]<!-- --> by making GHCi support unboxed values <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4412\" target=\"_blank\" rel=\"noopener noreferrer\">!4412</a>]<!-- -->: ByteCode is now generated from STG instead of directly from Core. It allows more Haskell codes to be supported by HLS and it even allows GHC code to be loaded into GHCi <!-- -->[<a href=\"https://mail.haskell.org/pipermail/ghc-devs/2021-October/020345.html\" target=\"_blank\" rel=\"noopener noreferrer\">link</a>]<!-- -->.</li><li>Fixed a bug in the Cmm sinking pass that led to register corruption at runtime with the C backend. Even if we don’t use the C backend, fixing this avoided spurious errors in CI jobs using it <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19237\" target=\"_blank\" rel=\"noopener noreferrer\">#19237</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5755/\" target=\"_blank\" rel=\"noopener noreferrer\">!5755</a>]</li><li>Fixed a register clobbering issue for 64-bit comparisons generated with the 32-bit x86 NCG backend <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/commit/ecd6d14215eb40ac441c075e432ddaa0237f3c72\" target=\"_blank\" rel=\"noopener noreferrer\">commit</a>]<!-- -->.</li><li>Fixed generation of switches on sized literals in StgToCmm <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6211\" target=\"_blank\" rel=\"noopener noreferrer\">!6211</a>]</li><li>Fixed LLVM shifts <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19215\" target=\"_blank\" rel=\"noopener noreferrer\">#19215</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4822\" target=\"_blank\" rel=\"noopener noreferrer\">!4822</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"linker\">Linker<a class=\"hash-link\" href=\"#linker\" title=\"Direct link to heading\">​</a></h2><ul><li>Fixed an off-by-one error in the MachO (Darwin) linker <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6041/\" target=\"_blank\" rel=\"noopener noreferrer\">!6041</a>]<!-- -->. The fix is simple but the debugging session was epic!</li><li>Fix to avoid linking plugin units unconditionally with target code, which is wrong in general but even more so when GHC is used as a cross-compiler: plugins and target code aren’t for the same platform <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20218\" target=\"_blank\" rel=\"noopener noreferrer\">#20218</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6496\" target=\"_blank\" rel=\"noopener noreferrer\">!6496</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"cross-compilation\">Cross-compilation<a class=\"hash-link\" href=\"#cross-compilation\" title=\"Direct link to heading\">​</a></h2><ul><li>With John Ericson (Obsidian Systems) we finally made GHC independent of its target <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6791\" target=\"_blank\" rel=\"noopener noreferrer\">!6791</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6539\" target=\"_blank\" rel=\"noopener noreferrer\">!6539</a>]<!-- -->. It means that there is no need to rebuild GHC to make it target another platform, so it now becomes possible to add support for a <code>--target=...</code> command-line flag <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/11470\" target=\"_blank\" rel=\"noopener noreferrer\">#11470</a>]<!-- -->. It also means that a cross-compiling GHC could build plugins for its host platform in addition to building code for its target platform.</li><li>A side-effect of the previous bullet is that primops’ types are now platform independent. Previously some of them would use Word64 on 32-bit architectures and Word on 64-bit architectures: now Word64 is used on every platform. A side-effect of this side-effect is that we had to make Word64 as efficient as Word: it now benefits from the same optimizations (constant folding <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19024\" target=\"_blank\" rel=\"noopener noreferrer\">#19024</a>, etc.). On 32-bit platforms, it reduced allocations by a fair amount in some cases: e.g. -25.8% in T9203 test and -11.5% when running haddock on base library <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6167\" target=\"_blank\" rel=\"noopener noreferrer\">!6167</a>]<!-- -->. We hope it will benefit other 32-bit architectures such as JavaScript or WebAssembly.</li><li>GHC built as a cross-compiler doesn’t support compiler plugins <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/14335\" target=\"_blank\" rel=\"noopener noreferrer\">#14335</a>]<!-- -->. We have been working on refactoring GHC to make it support two separate environments in a given compiler session – one for target code and another for the plugin/compiler code. The implementation in <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6748\" target=\"_blank\" rel=\"noopener noreferrer\">!6748</a>]<!-- --> conflicts quite a lot with the support of multiple home-units that was added at about the same time. GHC needs to be refactored a lot more to correctly support this approach, so instead we implemented a different approach to load plugins which is more low-level and bypasses the issue <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20964\" target=\"_blank\" rel=\"noopener noreferrer\">#20964</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377\" target=\"_blank\" rel=\"noopener noreferrer\">!7377</a>]<!-- -->.</li><li>We made GHC consider the target platform instead of the host platform in guessOutputFile <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6116\" target=\"_blank\" rel=\"noopener noreferrer\">!6116</a>]</li><li>Use target platform instead of host platform to detect literal overflows <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/17336\" target=\"_blank\" rel=\"noopener noreferrer\">#17336</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4986\" target=\"_blank\" rel=\"noopener noreferrer\">!4986</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"ghcjs\">GHCJS<a class=\"hash-link\" href=\"#ghcjs\" title=\"Direct link to heading\">​</a></h2><ul><li>We updated GHCJS to use GHC 8.10.7 <!-- -->[<a href=\"https://github.com/ghcjs/ghcjs/tree/ghc-8.10\" target=\"_blank\" rel=\"noopener noreferrer\">branch</a>]</li><li>We worked on making GHCJS’s codebase more suitable for integration into GHC: reducing the number of dependencies, avoiding the use of Template Haskell, reusing GHC’s build system, etc. There is now a GHCJS integrated into a GHC 8.10.7 fork <!-- -->[<a href=\"https://github.com/ghcjs/ghc/tree/ghc-8.10-ghcjs\" target=\"_blank\" rel=\"noopener noreferrer\">branch</a>]<!-- -->.</li><li>This experience led us to plan the realization of a JS backend into GHC head based on GHCJS. More information about this topic in our next report.</li><li>We worked on making GHC’s testsuite pass with GHCJS, triaging tests that legitimately fail on a JS platform from tests revealing real GHCJS issues. <strong>[<!-- -->LINK<!-- -->]</strong></li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"windows\">Windows<a class=\"hash-link\" href=\"#windows\" title=\"Direct link to heading\">​</a></h2><ul><li>We seemed to be the first to try to build GHC on Windows with the updated GNU autotools 2.70 and this release made a breaking change to the way auxiliary files (config.guess, config.sub) were handled, breaking GHC’s build (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19189#note_332168\" target=\"_blank\" rel=\"noopener noreferrer\">#19189</a>). The root cause of the issue couldn’t be easily solved so we modified GHC’s build system to avoid the use of these auxiliary files, bypassing the issue. Most GHC devs won’t ever notice that something was broken to begin with when they will update their GNU toolchain on Windows. <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4768\" target=\"_blank\" rel=\"noopener noreferrer\">!4768</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4987\" target=\"_blank\" rel=\"noopener noreferrer\">!4987</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5065/\" target=\"_blank\" rel=\"noopener noreferrer\">!5065</a>]</li><li>Fixed cross-compilation of GHC from Linux to Windows using Hadrian <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20657\" target=\"_blank\" rel=\"noopener noreferrer\">#20657</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6945\" target=\"_blank\" rel=\"noopener noreferrer\">!6945</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6958\" target=\"_blank\" rel=\"noopener noreferrer\">!6958</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"numeric\">Numeric<a class=\"hash-link\" href=\"#numeric\" title=\"Direct link to heading\">​</a></h2><ul><li>Fixed Natural to Float/Double conversions to align with the method used for Integer to Float/Double and added missing rewrite rules <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6004/\" target=\"_blank\" rel=\"noopener noreferrer\">!6004</a>]</li><li>Made most bignum literals be desugared into their final form in HsToCore stage instead of CoreToStg stage to ensure that Core optimizations were applied correctly to them <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20245\" target=\"_blank\" rel=\"noopener noreferrer\">#20245</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6376\" target=\"_blank\" rel=\"noopener noreferrer\">!6376</a>]</li><li>Some constant folding rules were missing and were added:<ul><li>bitwise <code>and</code> primops when applied to a full mask (e.g. 0xFF for a 8-bit word). <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20448\" target=\"_blank\" rel=\"noopener noreferrer\">#20448</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6629\" target=\"_blank\" rel=\"noopener noreferrer\">!6629</a>]</li><li><code>negate</code> primops <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20347\" target=\"_blank\" rel=\"noopener noreferrer\">#20347</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6535\" target=\"_blank\" rel=\"noopener noreferrer\">!6535</a></li><li><code>timesInt2#</code> primop <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20374\" target=\"_blank\" rel=\"noopener noreferrer\">#20374</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6531\" target=\"_blank\" rel=\"noopener noreferrer\">!6531</a></li><li><code>ctz#/clz#/popCnt#</code> <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20376\" target=\"_blank\" rel=\"noopener noreferrer\">#20376</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6532\" target=\"_blank\" rel=\"noopener noreferrer\">!6532</a></li><li>missing rewrite rule to make the implementation of <code>nat2Word#</code> efficient <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/15547\" target=\"_blank\" rel=\"noopener noreferrer\">#15547</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6847\" target=\"_blank\" rel=\"noopener noreferrer\">!6847</a>]</li><li>rules for <code>Natural</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/15821\" target=\"_blank\" rel=\"noopener noreferrer\">#15821</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4837\" target=\"_blank\" rel=\"noopener noreferrer\">!4837</a>]</li></ul></li><li>Allowed some ghc-bignum operations to inline to get better performance, while still managing to keep constant-folding working <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19641\" target=\"_blank\" rel=\"noopener noreferrer\">#19641</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6677\" target=\"_blank\" rel=\"noopener noreferrer\">!6677</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6696\" target=\"_blank\" rel=\"noopener noreferrer\">!6696</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6306\" target=\"_blank\" rel=\"noopener noreferrer\">!6306</a>]<!-- -->. There is some work left to do (cf <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20361\" target=\"_blank\" rel=\"noopener noreferrer\">#20361</a>) but it is blocked by <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19313\" target=\"_blank\" rel=\"noopener noreferrer\">#19313</a> which in turn is blocked by <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20554\" target=\"_blank\" rel=\"noopener noreferrer\">#20554</a> which should be fixed soon (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6865\" target=\"_blank\" rel=\"noopener noreferrer\">!6865</a>, thanks Joachim!).</li><li>The ubiquitous <code>fromIntegral</code> function used to have many associated rewrite rules to make it fast (avoiding heap allocation of a passthrough Integer when possible) that were difficult to manage due to the combinatorial number of needed rules (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19907\" target=\"_blank\" rel=\"noopener noreferrer\">#19907</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20062\" target=\"_blank\" rel=\"noopener noreferrer\">#20062</a>). We found a way to remove all these rules (<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5862\" target=\"_blank\" rel=\"noopener noreferrer\">!5862</a>).</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"technical-debt--modularity\">Technical debt &amp; modularity<a class=\"hash-link\" href=\"#technical-debt--modularity\" title=\"Direct link to heading\">​</a></h2><ul><li>Made several component of the compiler independent of <code>DynFlags</code> (parsed command-line flags):<ul><li>TmpFS (dealing with temporary files) <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6186\" target=\"_blank\" rel=\"noopener noreferrer\">!6186</a>]</li><li>Diagnostic options <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6043\" target=\"_blank\" rel=\"noopener noreferrer\">!6043</a>]</li><li>Tracing functions <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5970\" target=\"_blank\" rel=\"noopener noreferrer\">!5970</a>]</li><li>Logger <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4757\" target=\"_blank\" rel=\"noopener noreferrer\">!4757</a>]</li><li>Logger &amp; Parser <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5845\" target=\"_blank\" rel=\"noopener noreferrer\">!5845</a>]</li><li>Hooks <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4812\" target=\"_blank\" rel=\"noopener noreferrer\">!4812</a>]</li></ul></li><li>Made the handling of “package imports” less fragile <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6586\" target=\"_blank\" rel=\"noopener noreferrer\">!6586</a>]<!-- --> and refactored some code related to dependencies and recompilation avoidance <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6528\" target=\"_blank\" rel=\"noopener noreferrer\">!6528</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6346\" target=\"_blank\" rel=\"noopener noreferrer\">!6346</a>]<!-- -->.</li><li>Abstracted plugin related fields from HscEnv <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7175\" target=\"_blank\" rel=\"noopener noreferrer\">!7175</a>]</li><li>Made a home-unit optional in several places <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7013/\" target=\"_blank\" rel=\"noopener noreferrer\">!7013</a>]<!-- -->: the home-unit should only be required when compiling code, not when loading code (e.g. when loading plugins in cross-compilers <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/14335\" target=\"_blank\" rel=\"noopener noreferrer\">#14335</a>).</li><li>Made GHC no longer expose the (wrong) selected ghc-bignum backend with <code>ghc --info</code>. ghc-bignum now exposes a backendName function for this purpose <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20495\" target=\"_blank\" rel=\"noopener noreferrer\">#20495</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6903\" target=\"_blank\" rel=\"noopener noreferrer\">!6903</a>]</li><li>Moved <code>tmpDir</code> from Settings to <code>DynFlags</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6297/\" target=\"_blank\" rel=\"noopener noreferrer\">!6297</a>]</li><li>Removed use of <code>unsafePerfomIO</code> in <code>getProgName</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6137/\" target=\"_blank\" rel=\"noopener noreferrer\">!6137</a>]</li><li>Refactored warning flags handling <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5815\" target=\"_blank\" rel=\"noopener noreferrer\">!5815</a>]</li><li>Made assertions use normal functions instead of CPP <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5693\" target=\"_blank\" rel=\"noopener noreferrer\">!5693</a>]</li><li>Made the interpreter more independent of the driver <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5627\" target=\"_blank\" rel=\"noopener noreferrer\">!5627</a>]</li><li>Replaced <code>ptext . sLit</code> with <code>text</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5625\" target=\"_blank\" rel=\"noopener noreferrer\">!5625</a>]</li><li>Removed broken “dynamic-by-default” setting <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/16782\" target=\"_blank\" rel=\"noopener noreferrer\">#16782</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5467\" target=\"_blank\" rel=\"noopener noreferrer\">!5467</a>]</li><li>Abstracted some components from the compiler session state (<code>HscEnv</code>):<ul><li>unit-related fields into a new <code>UnitEnv</code>datatype <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5425\" target=\"_blank\" rel=\"noopener noreferrer\">!5425</a>]</li><li><code>FinderCache</code> and <code>NameCache</code>[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4951\" target=\"_blank\" rel=\"noopener noreferrer\">!4951</a>]</li><li>Loader state <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5287\" target=\"_blank\" rel=\"noopener noreferrer\">!5287</a>]</li></ul></li><li>Removed the need for a home unit-id to initialize an external package state (EPS) <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5043\" target=\"_blank\" rel=\"noopener noreferrer\">!5043</a>]</li><li>Refactored <code>-dynamic-too</code> handling <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19264\" target=\"_blank\" rel=\"noopener noreferrer\">#19264</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4905\" target=\"_blank\" rel=\"noopener noreferrer\">!4905</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"performance\">Performance<a class=\"hash-link\" href=\"#performance\" title=\"Direct link to heading\">​</a></h2><ul><li>Made <code>divInt#, modInt# and divModInt#</code> branchless and inlineable <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/18067\" target=\"_blank\" rel=\"noopener noreferrer\">#18067</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19636\" target=\"_blank\" rel=\"noopener noreferrer\">#19636</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3229\" target=\"_blank\" rel=\"noopener noreferrer\">!3229</a>]</li><li>Fixed Integral instances for Word8/16/32 and <code>showWord</code> to use <code>quotRemWordN</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5891\" target=\"_blank\" rel=\"noopener noreferrer\">!5891</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5846/\" target=\"_blank\" rel=\"noopener noreferrer\">!5846</a>]</li><li>Improved performance of occurrence analysis <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19989\" target=\"_blank\" rel=\"noopener noreferrer\">#19989</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5977\" target=\"_blank\" rel=\"noopener noreferrer\">!5977</a>]</li><li>Fixed unnecessary pinned allocations in <code>appendFS</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5989/\" target=\"_blank\" rel=\"noopener noreferrer\">!5989</a>]</li><li>Added a rewrite rules for string literals:<ul><li>Concatenation of string literals <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20174\" target=\"_blank\" rel=\"noopener noreferrer\">#20174</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/16373\" target=\"_blank\" rel=\"noopener noreferrer\">#16373</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6259\" target=\"_blank\" rel=\"noopener noreferrer\">!6259</a>]</li><li><code>(++) . unpackCString# ⇒ unpackAppendCString#</code> leading to a 15% reduction in compilation time on a specific example. <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6619\" target=\"_blank\" rel=\"noopener noreferrer\">!6619</a>]</li><li>Compute SDoc literal size at compilation time <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19266\" target=\"_blank\" rel=\"noopener noreferrer\">#19266</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4901\" target=\"_blank\" rel=\"noopener noreferrer\">!4901</a>]</li></ul></li><li>Fix for Dwarf strings generated by the NCG that were unnecessarily retained in the FastString table <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6621\" target=\"_blank\" rel=\"noopener noreferrer\">!6621</a>]</li><li>Worked on improving inlining heuristics by taking into account applied constructors at call sites <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20516\" target=\"_blank\" rel=\"noopener noreferrer\">#20516</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6732\" target=\"_blank\" rel=\"noopener noreferrer\">!6732</a>]<!-- -->. More work is needed though.</li><li>Fixed <a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20857\" target=\"_blank\" rel=\"noopener noreferrer\">#20857</a> by making the Id cache for primops used more often <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7241\" target=\"_blank\" rel=\"noopener noreferrer\">!7241</a>]</li><li>Replaced some avoidable uses of <code>replicateM . length</code> with more efficient code <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7198\" target=\"_blank\" rel=\"noopener noreferrer\">!7198</a>]<!-- -->. No performance gain this time but the next reader of this code won’t have to wonder if fixing it could improve performance.</li><li>Made <code>exprIsCheapX</code> inline for modest but easy perf improvements <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7183\" target=\"_blank\" rel=\"noopener noreferrer\">!7183</a>]</li><li>Removed an allocation in the code used to write text on a Handle (used by putStrLn, etc.) <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7160\" target=\"_blank\" rel=\"noopener noreferrer\">!7160</a>]</li><li>Replaced inefficient list operations with more efficient <code>Monoid ([a],[b])</code> operations in the driver <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7069\" target=\"_blank\" rel=\"noopener noreferrer\">!7069</a>]<!-- -->, leading to 1.9% reduction in compiler allocations in MultiLayerModules test.</li><li>Disabled some callstack allocations in non-debug builds <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6252/\" target=\"_blank\" rel=\"noopener noreferrer\">!6252</a>]</li><li>Made file copy in GHC more efficient <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5801\" target=\"_blank\" rel=\"noopener noreferrer\">!5801</a>]</li><li>Miscellaneous pretty-printer enhancements <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5226\" target=\"_blank\" rel=\"noopener noreferrer\">!5226</a>]</li><li>Type tidying perf improvements with strictness <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/14738\" target=\"_blank\" rel=\"noopener noreferrer\">#14738</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4892\" target=\"_blank\" rel=\"noopener noreferrer\">!4892</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"rts\">RTS<a class=\"hash-link\" href=\"#rts\" title=\"Direct link to heading\">​</a></h2><ul><li>Fixed issues related to the RTS’s ticker<ul><li>Fixed some races <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/18033\" target=\"_blank\" rel=\"noopener noreferrer\">#18033</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20132\" target=\"_blank\" rel=\"noopener noreferrer\">#20132</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6201\" target=\"_blank\" rel=\"noopener noreferrer\">!6201</a>]</li><li>Made the RTS open the file descriptor for its timer (<code>timerfd</code>) on Linux synchronously to avoid weird interactions with Haskell code manipulating file descriptors <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20618\" target=\"_blank\" rel=\"noopener noreferrer\">#20618</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6902\" target=\"_blank\" rel=\"noopener noreferrer\">!6902</a>]<!-- -->.</li></ul></li><li>Moved GHC’s global variables used to manage Uniques into the RTS to fix plugin issues <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19940\" target=\"_blank\" rel=\"noopener noreferrer\">#19940</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5900\" target=\"_blank\" rel=\"noopener noreferrer\">!5900</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"build-system--ci\">Build system / CI<a class=\"hash-link\" href=\"#build-system--ci\" title=\"Direct link to heading\">​</a></h2><ul><li>Fixed Hadrian output to display warnings and errors after the multi screen long command lines <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20490\" target=\"_blank\" rel=\"noopener noreferrer\">#20490</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6690\" target=\"_blank\" rel=\"noopener noreferrer\">!6690</a>]</li><li>Avoided the installation of a global <code>platformConstants</code> file; made GHC load constants from the RTS unit instead, allowing it to be reinstalled with different constants <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5427\" target=\"_blank\" rel=\"noopener noreferrer\">!5427</a>]</li><li>Made <code>deriveConstants</code> output its file atomically <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/19684\" target=\"_blank\" rel=\"noopener noreferrer\">#19684</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5520\" target=\"_blank\" rel=\"noopener noreferrer\">!5520</a>]</li><li>Made compression with <code>xz</code> faster on CI <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5066\" target=\"_blank\" rel=\"noopener noreferrer\">!5066</a>]</li><li>Don’t build extra object with <code>-no-hs-main</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/18938\" target=\"_blank\" rel=\"noopener noreferrer\">#18938</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4974\" target=\"_blank\" rel=\"noopener noreferrer\">!4974</a>]</li><li>Add <code>hi-boot</code> dependencies with <code>ghc -M</code> <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/14482\" target=\"_blank\" rel=\"noopener noreferrer\">#14482</a>,<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4876\" target=\"_blank\" rel=\"noopener noreferrer\">!4876</a>]</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"misc\">Misc<a class=\"hash-link\" href=\"#misc\" title=\"Direct link to heading\">​</a></h2><ul><li>Stack: fixed interface reading in <code>hi-file-parser</code> to support GHC 8.10 and 9.0 <!-- -->[<a href=\"https://github.com/commercialhaskell/hi-file-parser/pull/2\" target=\"_blank\" rel=\"noopener noreferrer\">PR</a>, <a href=\"https://github.com/commercialhaskell/stack/issues/5134\" target=\"_blank\" rel=\"noopener noreferrer\">Stack#5134</a>]</li><li>Enhanced pretty-printing of coercions in Core dumps <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/4856\" target=\"_blank\" rel=\"noopener noreferrer\">!4856</a>]</li></ul>",
            "url": "https://engineering.iog.io/2022-03-01-2021-ghc-update",
            "title": "2021 GHC update",
            "summary": "IOG is committed to improving Haskell developer experience, both by sponsoring the Haskell Foundation and by directly founding a team committed to this task: the Haskell DX team.",
            "date_modified": "2022-03-01T00:00:00.000Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "2022-03-01-haskell-nix-february-update",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"documentation\">Documentation<a class=\"hash-link\" href=\"#documentation\" title=\"Direct link to heading\">​</a></h2><ul><li>A tutorial has been added on <a href=\"https://outline.zw3rk.com/share/d461004d-1f2f-4d7a-95f2-4e20acb18cac\" target=\"_blank\" rel=\"noopener noreferrer\">building DWARF-enabled executables</a> on linux systems.  There was also a related fix for building DWARF executables in a nix shell (<a href=\"https://github.com/input-output-hk/haskell.nix/pull/1385\" target=\"_blank\" rel=\"noopener noreferrer\">#1385</a>)</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"changes\">Changes<a class=\"hash-link\" href=\"#changes\" title=\"Direct link to heading\">​</a></h2><ul><li>Support for external Hackage repositories was improved by <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1370\" target=\"_blank\" rel=\"noopener noreferrer\">#1370</a>. We can now use an extra package repository just by adding a <code>repository</code> block to the <code>cabal.project</code> file.  This makes it easy to make use of an extra hackage databases such as <a href=\"https://ghc.gitlab.haskell.org/head.hackage/\" target=\"_blank\" rel=\"noopener noreferrer\">hackage.head</a> and <a href=\"https://github.com/input-output-hk/hackage-overlay-ghcjs\" target=\"_blank\" rel=\"noopener noreferrer\">hackage-overlay-ghcjs</a>.  A <code>sha256</code> for the repository it can be added as a comment in the <code>repository</code> block or by including it in the <code>sha256map</code> argument.</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"version-updates\">Version Updates<a class=\"hash-link\" href=\"#version-updates\" title=\"Direct link to heading\">​</a></h2><ul><li>nix-tools was updated to use the Cabal 3.6.2 and hnix 0.16 <a href=\"https://github.com/input-output-hk/nix-tools/pull/113\" target=\"_blank\" rel=\"noopener noreferrer\">nix-tools#113</a></li><li>Nixpkgs pins were bumped <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1371\" target=\"_blank\" rel=\"noopener noreferrer\">#1371</a></li><li>Update booting on aarch64 linux to ghc 8.8.4 <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1325\" target=\"_blank\" rel=\"noopener noreferrer\">1325</a> and <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1374\" target=\"_blank\" rel=\"noopener noreferrer\">1374</a></li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"bug-fixes\">Bug fixes<a class=\"hash-link\" href=\"#bug-fixes\" title=\"Direct link to heading\">​</a></h2><ul><li>Allow linking pcre statically with musl <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1363\" target=\"_blank\" rel=\"noopener noreferrer\">#1363</a></li><li>Add gpiod to system nixpkgs map <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1359\" target=\"_blank\" rel=\"noopener noreferrer\">#1359</a></li><li>Add poppler-cpp to png-config Nixpkgs map <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1373\" target=\"_blank\" rel=\"noopener noreferrer\">#1373</a></li><li>Use the same logic that cabal-install uses for determining the path of a packages <code>.tar.gz</code> in a repository  <a href=\"https://github.com/input-output-hk/nix-tools/pull/114\" target=\"_blank\" rel=\"noopener noreferrer\">nix-tools#114</a></li><li>Fix libnuma dependency in rts.conf <a href=\"https://github.com/input-output-hk/haskell.nix/commit/18ebf60137dd2ff1be7363eb46f67ebfa366d1dd\" target=\"_blank\" rel=\"noopener noreferrer\">1342</a></li><li>Fix when \"materialized\" dir is deep <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1376\" target=\"_blank\" rel=\"noopener noreferrer\">#1376</a></li><li>Prefer local building for <code>git-ls-files</code> <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1378\" target=\"_blank\" rel=\"noopener noreferrer\">#1378</a> and <a href=\"https://github.com/input-output-hk/haskell.nix/issues/1381\" target=\"_blank\" rel=\"noopener noreferrer\">#1381</a></li><li>Fix stack cache generator <code>sha256</code> is a string not a lambda <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1383\" target=\"_blank\" rel=\"noopener noreferrer\">#1383</a></li><li>Only pass <code>--index-state</code> to <code>cabal</code> when asked <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1384\" target=\"_blank\" rel=\"noopener noreferrer\">#1384</a></li><li>Pass <code>enableDWARF</code> to <code>makeConfigFiles</code> to fix <code>-g3</code> support in <code>nix-shell</code> <a href=\"https://github.com/input-output-hk/haskell.nix/pull/1385\" target=\"_blank\" rel=\"noopener noreferrer\">#1385</a></li></ul><p>Finally, we’d like to thank all the awesome contributors, who make&nbsp;<code>haskell.nix</code>&nbsp;a thriving open source project!&nbsp;❤️</p>",
            "url": "https://engineering.iog.io/2022-03-01-haskell-nix-february-update",
            "title": "haskell.nix February Update",
            "summary": "Documentation",
            "date_modified": "2022-03-01T00:00:00.000Z",
            "tags": [
                "nix"
            ]
        },
        {
            "id": "2022-02-01-ghc-january-2022-update",
            "content_html": "<p>Hopefully 2022 should be the year GHC will get a JavaScript backend without relying on GHCJS. This month the team has been busy planning the work that needs to be done to get there!</p><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"cross-compilation\">Cross-compilation<a class=\"hash-link\" href=\"#cross-compilation\" title=\"Direct link to heading\">​</a></h2><ul><li>GHCJS has been <a href=\"https://github.com/ghcjs/ghc/tree/ghc-8.10-ghcjs\" target=\"_blank\" rel=\"noopener noreferrer\">updated</a> to reduce the gap with GHC 8.10.7 codebase to the point that GHC’s build system is used to build GHCJS</li><li>Internal work planning for the integration of GHCJS into GHC</li><li>A different approach to load plugins into cross-compilers has been implemented <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/20964\" target=\"_blank\" rel=\"noopener noreferrer\">#20964</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7377\" target=\"_blank\" rel=\"noopener noreferrer\">!7377</a>]</li><li>GHCJS has been exercised to showcase compilation of some Plutus applications</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"modularity\">Modularity<a class=\"hash-link\" href=\"#modularity\" title=\"Direct link to heading\">​</a></h2><ul><li>A few “subsystems” of GHC have been made more modular and reusable by making them independent of the command-line flags (<code>DynFlags</code>) <!-- -->[<a href=\"https://gitlab.haskell.org/ghc/ghc/-/issues/17957\" target=\"_blank\" rel=\"noopener noreferrer\">#17957</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7158\" target=\"_blank\" rel=\"noopener noreferrer\">!7158</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7199\" target=\"_blank\" rel=\"noopener noreferrer\">!7199</a>, <a href=\"https://gitlab.haskell.org/ghc/ghc/-/merge_requests/7325\" target=\"_blank\" rel=\"noopener noreferrer\">!7325</a>]<!-- -->. This work resulted in a 10% reduction in call sites to <code>DynFlags</code> and has now removed all references to <code>DynFlags</code> up to the <code>CoreToStg</code> pass, which is almost the entire backend of GHC.</li></ul><h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"performance\">Performance<a class=\"hash-link\" href=\"#performance\" title=\"Direct link to heading\">​</a></h2><ul><li>Jeffrey wrote a new HF <a href=\"https://github.com/haskellfoundation/tech-proposals/pull/26\" target=\"_blank\" rel=\"noopener noreferrer\">proposal</a> about writing a Haskell Optimization handbook and has started working on it</li></ul>",
            "url": "https://engineering.iog.io/2022-02-01-ghc-january-2022-update",
            "title": "GHC January 2022 update",
            "summary": "Hopefully 2022 should be the year GHC will get a JavaScript backend without relying on GHCJS. This month the team has been busy planning the work that needs to be done to get there!",
            "date_modified": "2022-02-01T00:00:00.000Z",
            "author": {
                "name": "Sylvain Henry"
            },
            "tags": [
                "ghc"
            ]
        },
        {
            "id": "2022-02-01-haskell-nix-january-update",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"january-2022\"><strong>January 2022</strong><a class=\"hash-link\" href=\"#january-2022\" title=\"Direct link to heading\">​</a></h2><p>This month we merged some very significant improvements to the support for compiling for Android and iOS based AArch64 devices.&nbsp; When the build system is also AArch64 template haskell can often be run locally.&nbsp; This will make targeting mobile devices from AArch64 builders much easier.</p><p>A long running branch containing bug fixes for cross compilation to JavaScript with GHCJS was merged.&nbsp; One nice feature included is better support for adding bindings to C code compiled with emscripten.&nbsp; In some cases it can be as easy as adding a single JavaScript file to the package with wrappers for the C functions.</p><h4 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"changes\">Changes<a class=\"hash-link\" href=\"#changes\" title=\"Direct link to heading\">​</a></h4><ul><li>Much improved AArch64 support including Template Haskell (#1316)</li><li>Improved GHCJS and support for calling C code compiled with emscripten (#1311)</li><li>The environment variables LANG and LOCALE_ARCHIVE are no longer set in shells allowing the users prefered settings to persist (#1341).</li><li>source-repo-override argument added for cabal projects to allow the location of source-repository-package packages to be replaced (#1354)</li></ul><h4 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"version-updates\">Version Updates<a class=\"hash-link\" href=\"#version-updates\" title=\"Direct link to heading\">​</a></h4><ul><li>GHC 9.0.2 was added to the available GHC versions (#1338)</li><li>The nixpkgs pins for 21.05, 21.11 and unstable were all updated (#1334).</li><li>Remaining uses of cabal 3.4 were updated to 3.6.2 (#1328)</li></ul><h4 class=\"anchor anchorWithStickyNavbar_mojV\" id=\"bug-fixes\">Bug fixes<a class=\"hash-link\" href=\"#bug-fixes\" title=\"Direct link to heading\">​</a></h4><ul><li>Dwarf build of ghc 9.2.1 now skipped on hydra to work around 4GB hydra limit (#1333)</li><li>Removed use of propagatedBuildInputs in ghc derivation (#1318).</li><li>Caching of the check-hydra CI script was fixed (#1340)</li></ul>",
            "url": "https://engineering.iog.io/2022-02-01-haskell-nix-january-update",
            "title": "haskell.nix January Update",
            "summary": "January 2022",
            "date_modified": "2022-02-01T00:00:00.000Z",
            "tags": [
                "nix"
            ]
        }
    ]
}